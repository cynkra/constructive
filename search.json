[{"path":"https://cynkra.github.io/constructive/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 constructive authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cynkra.github.io/constructive/articles/extend-constructive.html","id":"construct-and--cstr_construct","dir":"Articles","previous_headings":"","what":"construct() and .cstr_construct()","title":"Extend constructive","text":".cstr_construct() builds code recursively, without checking inputs output validity, without error handling, without formatting. construct() wraps .cstr_construct() extra work. .cstr_construct() generic many methods implemented package, instance construct(iris) call .cstr_construct.data.frame() line call .cstr_construct.numeric() .cstr_construct.factor() construct columns. Attempt match data input list objects provided data argument. Restrict dispatch classes argument functions construct_base() construct_dput() can work.","code":".cstr_construct #> function(x, ..., data = NULL, classes = NULL) { #>   data_name <- perfect_match(x, data) #>   if (!is.null(data_name)) return(data_name) #>   if (is.null(classes)) { #>     UseMethod(\".cstr_construct\") #>   } else if (identical(classes, \"-\")) { #>     .cstr_construct.default(x, ..., classes = classes) #>   } else if (classes[[1]] == \"-\") { #>     cl <- setdiff(.class2(x), classes[-1]) #>     UseMethod(\".cstr_construct\", structure(NA_integer_, class = cl)) #>   } else { #>     cl <- intersect(.class2(x), classes) #>     UseMethod(\".cstr_construct\", structure(NA_integer_, class = cl)) #>   } #> } #> <bytecode: 0x557ca977c6c8> #> <environment: namespace:constructive> # a character vector .cstr_construct(letters) #> [1] \"c(\"                                                                                                         #> [2] \"  \\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\", \\\"f\\\", \\\"g\\\", \\\"h\\\", \\\"i\\\", \\\"j\\\", \\\"k\\\", \\\"l\\\", \\\"m\\\", \\\"n\\\", \\\"o\\\",\" #> [3] \"  \\\"p\\\", \\\"q\\\", \\\"r\\\", \\\"s\\\", \\\"t\\\", \\\"u\\\", \\\"v\\\", \\\"w\\\", \\\"x\\\", \\\"y\\\", \\\"z\\\"\"                              #> [4] \")\" # a constructive object,  construct(letters) #> c( #>   \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", #>   \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" #> )"},{"path":"https://cynkra.github.io/constructive/articles/extend-constructive.html","id":"cstr_construct-class-methods","dir":"Articles","previous_headings":"","what":".cstr_construct.<class>() methods","title":"Extend constructive","text":".cstr_construct.<class>() methods generics , typically form: opts contains options passed ... template arguments construct() opts_*() functions, fall back default value none provided. list(...)$opts idiom used various places, allows us forward dots conveniently. object corrupted user decided bypass current method choosing “next” constructor class, return NextMethod() forward inputs lower level constructor. finally dispatch method based constructor, object’s class done traditionally. explains unusual look UseMethod() call .","code":".cstr_construct.Date <- function(x, ...) {   opts <- list(...)$opts$Date %||% opts_Date()   if (is_corrupted_Date(x) || opts$constructor == \"next\") return(NextMethod())   UseMethod(\".cstr_construct.Date\", structure(NA, class = opts$constructor)) }"},{"path":"https://cynkra.github.io/constructive/articles/extend-constructive.html","id":"opts_class-function","dir":"Articles","previous_headings":"","what":"opts_<class>() function","title":"Extend constructive","text":"implementing new method ’ll need define export corresponding opts_<class>() function. provides user way choose constructor additional parameters, sets default behavior. always form: class present name opts_<class>() function first argument .cstr_options(). character vector constructors provided, starting default constructor “next” value mandatory except internal types. Additional options retrievable constructor might added, origin Note don’t use match.arg() , new constructors can defined outside package.","code":"opts_Date <- function(     constructor = c(       \"as.Date\", \"as_date\", \"date\", \"new_date\", \"as.Date.numeric\", \"as_date.numeric\", \"next\", \"double\"),      ...,      origin = \"1970-01-01\") {   .cstr_options(\"Date\", constructor = constructor[[1]], ..., origin = origin) }"},{"path":"https://cynkra.github.io/constructive/articles/extend-constructive.html","id":"is_corrupted_class-function","dir":"Articles","previous_headings":"","what":"is_corrupted_<class>() function","title":"Extend constructive","text":"is_corrupted_<class>() checks x right internal type attributes, sometimes structure, satisfies expectations well formatted object given class. object corrupted given class use constructors class, move lower level constructor calling NextMethod() .cstr_construct(). important constructive doesn’t choke corrupted objects instead helps us understand . instance following example x prints like date ’s corrupted, date built top characters object built .Date() idiomatic date constructors. defined : consequence next method, .cstr_construct.default() called NextMethod() handle object using atomic vector constructor:","code":"x <- structure(\"12345\", class = \"Date\") x #> [1] \"2003-10-20\" x + 1 #> Error in unclass(e1) + unclass(e2): non-numeric argument to binary operator is_corrupted_Date <- function(x) {   !is.double(x) } construct(x) #> \"12345\" |> #>   structure(class = \"Date\")"},{"path":"https://cynkra.github.io/constructive/articles/extend-constructive.html","id":"constructors","dir":"Articles","previous_headings":"","what":"Constructors","title":"Extend constructive","text":"constructors functions named .cstr_construct.<class>.<constructor>. instance default constructor “Date” : arguments x ..., . Additional parameters fed opt_<class>() function can fetched list(...)$opts$<class> function .cstr_apply() used construct arguments recursively. Sometimes constructor handle cases need fall back another constructor, happens Inf, NA, decimal dates represented string wrapped .Date(). last line function essential, attribute repair.","code":"constructive:::.cstr_construct.Date.as.Date #> function(x, ...) { #>   opts <- list(...)$opts$Date %||% opts_Date() #>   origin <- opts$origin #>   compatible_with_char <- #>     all(rlang::is_integerish(x) & (is.finite(x) | (is.na(x) & !is.nan(x)))) #>   if (!compatible_with_char || all(is.na(x))) { #>     return(.cstr_construct.Date.as.Date.numeric(x, ...)) #>   } #>   code <- .cstr_apply(list(format(x)),  \"as.Date\", ..., new_line = FALSE) #>   repair_attributes_Date(x, code, ...) #> } #> <bytecode: 0x557ca9b2bf90> #> <environment: namespace:constructive> x <- structure(c(12345, 20000), class = \"Date\") y <- structure(c(12345, Inf), class = \"Date\") construct(x) #> as.Date(c(\"2003-10-20\", \"2024-10-04\")) construct(y) #> as.Date(c(12345, Inf), origin = \"1970-01-01\")"},{"path":"https://cynkra.github.io/constructive/articles/extend-constructive.html","id":"attribute-repair","dir":"Articles","previous_headings":"","what":"Attribute repair","title":"Extend constructive","text":"Constructors always end call .cstr_repair_attributes() function wraps . needed adjust attributes object idiomatic constructors .Date() defined data canonical attributes. .cstr_repair_attributes() essentially sets attributes exceptions : doesn’t set names default, handled constructors doesn’t set class explicitly ’s identical idiomatic class, .e. class returned constructor repair call, provided idiomatic_class argument doesn’t set attributes choose ignore set constructor (e.g. row names data frames levels factors)","code":"x <- structure(c(12345, 20000), class = \"Date\", some_attr = 42) # attributes are not visible due to \"Date\"'s printing method x #> [1] \"2003-10-20\" \"2024-10-04\"  construct(x) #> as.Date(c(\"2003-10-20\", \"2024-10-04\")) |> #>   structure(some_attr = 42) constructive:::repair_attributes_Date #> function(x, code, ...) { #>   .cstr_repair_attributes( #>     x, code, ..., #>     idiomatic_class = \"Date\" #>   ) #> } #> <bytecode: 0x557ca5a66198> #> <environment: namespace:constructive>  constructive:::repair_attributes_factor #> function(x, code, ...) { #>   .cstr_repair_attributes( #>     x, code, ..., #>     ignore = \"levels\", #>     idiomatic_class = \"factor\" #>   ) #> } #> <bytecode: 0x557caa5a58b0> #> <environment: namespace:constructive>  constructive:::repair_attributes_tbl_df #> function(x, code, ...) { #>   .cstr_repair_attributes( #>     x, code, ..., #>     ignore = \"row.names\", #>     idiomatic_class = c(\"tbl_df\", \"tbl\", \"data.frame\") #>   ) #> } #> <bytecode: 0x557caa559040> #> <environment: namespace:constructive>"},{"path":"https://cynkra.github.io/constructive/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Antoine Fabri. Author, maintainer. Kirill Müller. Contributor. Jacob Scott. Contributor. cynkra GmbH. Funder.","code":""},{"path":"https://cynkra.github.io/constructive/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fabri (2025). constructive: Display Idiomatic Code Construct R Objects. R package version 1.1.0.9000, https://github.com/cynkra/constructive.","code":"@Manual{,   title = {constructive: Display Idiomatic Code to Construct Most R Objects},   author = {Antoine Fabri},   year = {2025},   note = {R package version 1.1.0.9000},   url = {https://github.com/cynkra/constructive}, }"},{"path":"https://cynkra.github.io/constructive/index.html","id":"constructive-","dir":"","previous_headings":"","what":"Display Idiomatic Code to Construct Most R Objects","title":"Display Idiomatic Code to Construct Most R Objects","text":"{constructive} prints code can used recreate R objects. sense similar base::dput() base::deparse() {constructive} strives use idiomatic constructors (factor factors, .Date() dates, data.frame() data frames etc), order get output readable humans. use cases : Snapshot tests Exploring objects (alternative dput() str()) Creating reproducible examples existing data Comparing two objects (using construct_diff())","code":""},{"path":"https://cynkra.github.io/constructive/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Display Idiomatic Code to Construct Most R Objects","text":"Install last stable version CRAN: install development version cynkra R-universe: directly github:","code":"install.packages('constructive') install.packages('constructive', repos = c('https://cynkra.r-universe.dev', 'https://cloud.r-project.org')) pak::pak(\"cynkra/constructive\")"},{"path":"https://cynkra.github.io/constructive/index.html","id":"comparison-with-dput","dir":"","previous_headings":"","what":"Comparison with dput()","title":"Display Idiomatic Code to Construct Most R Objects","text":"examples compared dput() output. can provide data argument named list, environment, package look data, unnamed list items, don’t print necessary, instance improving previous example:","code":"library(constructive)  construct(head(iris, 2)) #> data.frame( #>   Sepal.Length = c(5.1, 4.9), #>   Sepal.Width = c(3.5, 3), #>   Petal.Length = c(1.4, 1.4), #>   Petal.Width = c(0.2, 0.2), #>   Species = factor(c(\"setosa\", \"setosa\"), levels = c(\"setosa\", \"versicolor\", \"virginica\")) #> )  dput(head(iris, 2)) #> structure(list(Sepal.Length = c(5.1, 4.9), Sepal.Width = c(3.5,  #> 3), Petal.Length = c(1.4, 1.4), Petal.Width = c(0.2, 0.2), Species = structure(c(1L,  #> 1L), levels = c(\"setosa\", \"versicolor\", \"virginica\"), class = \"factor\")), row.names = 1:2, class = \"data.frame\")  construct(.leap.seconds) #> as.POSIXct( #>   c( #>     \"1972-07-01\", \"1973-01-01\", \"1974-01-01\", \"1975-01-01\", \"1976-01-01\", #>     \"1977-01-01\", \"1978-01-01\", \"1979-01-01\", \"1980-01-01\", \"1981-07-01\", #>     \"1982-07-01\", \"1983-07-01\", \"1985-07-01\", \"1988-01-01\", \"1990-01-01\", #>     \"1991-01-01\", \"1992-07-01\", \"1993-07-01\", \"1994-07-01\", \"1996-01-01\", #>     \"1997-07-01\", \"1999-01-01\", \"2006-01-01\", \"2009-01-01\", \"2012-07-01\", #>     \"2015-07-01\", \"2017-01-01\" #>   ), #>   tz = \"GMT\" #> )  dput(.leap.seconds) #> structure(c(78796800, 94694400, 126230400, 157766400, 189302400,  #> 220924800, 252460800, 283996800, 315532800, 362793600, 394329600,  #> 425865600, 489024000, 567993600, 631152000, 662688000, 709948800,  #> 741484800, 773020800, 820454400, 867715200, 915148800, 1136073600,  #> 1230768000, 1341100800, 1435708800, 1483228800), class = c(\"POSIXct\",  #> \"POSIXt\"), tzone = \"GMT\")  library(dplyr, warn.conflicts = FALSE) grouped_band_members <- group_by(band_members, band)  dput(grouped_band_members) #> structure(list(name = c(\"Mick\", \"John\", \"Paul\"), band = c(\"Stones\",  #> \"Beatles\", \"Beatles\")), class = c(\"grouped_df\", \"tbl_df\", \"tbl\",  #> \"data.frame\"), row.names = c(NA, -3L), groups = structure(list( #>     band = c(\"Beatles\", \"Stones\"), .rows = structure(list(2:3,  #>         1L), ptype = integer(0), class = c(\"vctrs_list_of\", \"vctrs_vctr\",  #>     \"list\"))), class = c(\"tbl_df\", \"tbl\", \"data.frame\"), row.names = c(NA,  #> -2L), .drop = TRUE))  construct(grouped_band_members) #> tibble::tibble(name = c(\"Mick\", \"John\", \"Paul\"), band = c(\"Stones\", \"Beatles\", \"Beatles\")) |> #>   dplyr::group_by(band) construct(grouped_band_members, data = \"dplyr\") #> band_members |> #>   dplyr::group_by(band)"},{"path":"https://cynkra.github.io/constructive/index.html","id":"customize-the-output-using-constructive-options","dir":"","previous_headings":"","what":"Customize the output using constructive options","title":"Display Idiomatic Code to Construct Most R Objects","text":"objects can constructed several ways, instance tibble might constructed using tibble::tibble() using tibble::tribble(). opts_*() family functions provides ways tweak output code, namely setting constructor options used constructor functions documentation page referenced ?construct. every class doesn’t refer internal type “next” constructor available, can conveniently explore objects using lower level constructors.","code":"construct(band_members, opts_tbl_df(\"tribble\")) #> tibble::tribble( #>   ~name,  ~band, #>   \"Mick\", \"Stones\", #>   \"John\", \"Beatles\", #>   \"Paul\", \"Beatles\", #> ) construct(band_members, opts_tbl_df(\"tribble\", justify = \"right\")) #> tibble::tribble( #>    ~name,     ~band, #>   \"Mick\",  \"Stones\", #>   \"John\", \"Beatles\", #>   \"Paul\", \"Beatles\", #> )  r <- as.raw(c(0x68, 0x65, 0x6c, 0x6c, 0x6f)) construct(r) #> as.raw(c(0x68, 0x65, 0x6c, 0x6c, 0x6f)) construct(r, opts_raw(representation = \"decimal\")) #> as.raw(c(104, 101, 108, 108, 111)) construct(r, opts_raw(\"charToRaw\")) #> charToRaw(\"hello\") construct(band_members, opts_tbl_df(\"next\")) #> data.frame(name = c(\"Mick\", \"John\", \"Paul\"), band = c(\"Stones\", \"Beatles\", \"Beatles\")) |> #>   structure(class = c(\"tbl_df\", \"tbl\", \"data.frame\"))  construct(band_members, opts_tbl_df(\"next\"), opts_data.frame(\"next\")) #> list(name = c(\"Mick\", \"John\", \"Paul\"), band = c(\"Stones\", \"Beatles\", \"Beatles\")) |> #>   structure(class = c(\"tbl_df\", \"tbl\", \"data.frame\"), row.names = c(NA, -3L))"},{"path":"https://cynkra.github.io/constructive/index.html","id":"other-functions","dir":"","previous_headings":"","what":"Other functions","title":"Display Idiomatic Code to Construct Most R Objects","text":"construct_multi() constructs several objects named list environment construct_reprex() wraps construct_multi() constructs objects local environment, caller environments. construct_dput() constructs objects using low level constructors, like structure(), list(), c(), similarly base::dput() construct_base() constructs objects using base R functions. construct_clip() writes clipboard, see also ?constructive-global_options construct_diff() highlights differences code used produce 2 objects, ’s alternative waldo::compare(). construct_dump() similar base::dump(), ’s wrapper around construct_multi() writes file. construct_signature() constructs function signature one see “usage” section function’s help file. outputs code produced construct_issues() used without arguments check issues encountered last reconstructed object, can also provided specific constructive object. deparse_call() alternative base::deparse() rlang::expr_deparse() handles additional corner cases fails encountering tokens symbols syntactic literals .","code":""},{"path":"https://cynkra.github.io/constructive/index.html","id":"note-about-environments-and-external-pointers","dir":"","previous_headings":"","what":"Note about environments and external pointers","title":"Display Idiomatic Code to Construct Most R Objects","text":"Environments use reference semantics, copied. attempt copy environment indeed yield different environment identical(env, copy) FALSE (read ?opts_environment). case can build code points specific environment, instance: ’s possible use constructive::.env() function purpose. constructive::.env() fetches environment memory address. parents argument doesn’t anything, provides additional information sequence parents reach special environment. strategy convenient always works, ’s reproducible sessions memory address stable. Moreover doesn’t tell us anything environment’s content. Depending compromise ’re ready make, might use different constructions opts_environment(). case , choosing \"list2env\" works well : constructive::.xptr() counterpart constructive::.env() construct \"externalptr\" objects memory address.","code":"construct(globalenv()) #> .GlobalEnv construct(environment(setNames)) #> asNamespace(\"stats\") e1 <- new.env(parent = .GlobalEnv) e1$x <- 1 construct(e1) #> constructive::.env(\"0x131515348\", parents = \"global\") construct(e1, opts_environment(\"list2env\")) #> list2env(list(x = 1), parent = .GlobalEnv)"},{"path":"https://cynkra.github.io/constructive/index.html","id":"extending-constructive","dir":"","previous_headings":"","what":"Extending constructive","title":"Display Idiomatic Code to Construct Most R Objects","text":"can define constructors methods! information see vignette(\"User-defined-methods--constructors\", package = \"constructive\")","code":""},{"path":"https://cynkra.github.io/constructive/reference/compare_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Options for waldo::compare — compare_options","title":"Options for waldo::compare — compare_options","text":"Builds options passed waldo::compare() line.","code":""},{"path":"https://cynkra.github.io/constructive/reference/compare_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Options for waldo::compare — compare_options","text":"","code":"compare_options(   ignore_srcref = TRUE,   ignore_attr = FALSE,   ignore_function_env = FALSE,   ignore_formula_env = FALSE )"},{"path":"https://cynkra.github.io/constructive/reference/compare_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Options for waldo::compare — compare_options","text":"ignore_srcref Ignore differences function srcrefs? TRUE default since srcref change behaviour function, printed representation. ignore_attr Ignore differences specified attributes? Supply character vector ignore differences named attributes. default \"waldo_opts\" attribute listed ignore_attr changes reported; customize ignore_attr, probably want . backward compatibility .equal(), can also use TRUE, ignore differences attributes. generally recommended blunt tool ignore many important functional differences. ignore_function_env, ignore_formula_env Ignore environments functions formulas, respectively? provided primarily backward compatibility .equal() always ignores environments.","code":""},{"path":"https://cynkra.github.io/constructive/reference/compare_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Options for waldo::compare — compare_options","text":"list","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct.html","id":null,"dir":"Reference","previous_headings":"","what":"Build code to recreate an object — construct","title":"Build code to recreate an object — construct","text":"construct() builds code reproduce one object, construct_multi() builds code reproduce objects stored named list environment.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build code to recreate an object — construct","text":"","code":"construct(   x,   ...,   data = NULL,   pipe = NULL,   check = NULL,   unicode_representation = c(\"ascii\", \"latin\", \"character\", \"unicode\"),   escape = FALSE,   pedantic_encoding = FALSE,   compare = compare_options(),   one_liner = FALSE,   template = getOption(\"constructive_opts_template\"),   classes = NULL )  construct_multi(   x,   ...,   data = NULL,   pipe = NULL,   check = NULL,   unicode_representation = c(\"ascii\", \"latin\", \"character\", \"unicode\"),   escape = FALSE,   pedantic_encoding = FALSE,   compare = compare_options(),   one_liner = FALSE,   template = getOption(\"constructive_opts_template\"),   classes = NULL,   include_dotted = TRUE )"},{"path":"https://cynkra.github.io/constructive/reference/construct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build code to recreate an object — construct","text":"x object, construct_multi() named list environment. ... Constructive options built opts_*() family functions. See \"Constructive options\" section . data Named list environment objects want detect mention name (opposed deparsing ). Can also contain unnamed nested lists, environments, package names, latter case package exports datasets considered. case conflict, last provided name considered. pipe pipe use, either \"base\" \"magrittr\". Defaults \"base\" R >= 4.2, otherwise \"magrittr\". check Boolean. Whether check created code reproduces object using waldo::compare(). unicode_representation default \"ascii\", means ASCII characters (code point < 128) used construct strings variable names. makes sure homoglyphs (different spaces identically displayed unicode characters) printed differently, avoid possible unfortunate copy paste auto conversion issues. \"latin\" lax uses latin characters (code point < 256). \"character\" shows characters, emojis. Finally \"unicode\" displays characters emojis, dput() . escape Boolean. Whether escape double quotes backslashes. FALSE use single quotes surround strings (including variable element names) containing double quotes, raw strings strings contain backslashes /combination single double quotes. Depending unicode_representation escape = FALSE applied strings. pedantic_encoding Boolean. Whether mark strings \"unknown\" encoding rather explicit native encoding (\"UTF-8\" \"latin1\") necessary reproduce binary representation exactly. detail normally little significance. reason pedantic default constructed code might different console snapshot tests reprexes due latter rounding angles, confusing users. compare Parameters passed waldo::compare(), built compare_options(). one_liner Boolean. Whether collapse output single line code. template list constructive options built opts_*() functions, overriden .... Use set default behavior {constructive}. classes character vector classes use idiomatic constructors available, can provide package instead classes, \"{pkg}\" form, can use minus sign (inside quotes) exclude rather include. default use idiomatic constructors whenever possible. special values \"*none*\" \"*base*\" can used restrict idiomatic construction objects. See construct_dput() construct_base() wrappers around feature. include_dotted Whether include names starting dots, includes .Random.seed global environment objects like .Class .Generic execution environments S3 methods.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build code to recreate an object — construct","text":"object class 'constructive'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build code to recreate an object — construct","text":"construct_multi() recognizes promises (also called lazy bindings), means instance construct_multi(environment()) can called debugging function construct unevaluated arguments using delayedAssign().","code":""},{"path":[]},{"path":"https://cynkra.github.io/constructive/reference/construct.html","id":"constructive-options","dir":"Reference","previous_headings":"","what":"Constructive options","title":"Build code to recreate an object — construct","text":"Constructive options provide way customize output `construct()`. can provide calls `opts_*()` functions `...` argument. functions targets specific type class documented page. opts_array(constructor = c(\"array\", \"next\"), ...) opts_AsIs(constructor = c(\"\", \"next\"), ...) opts_atomic(..., trim = NULL, fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"), compress = TRUE) opts_bibentry(constructor = c(\"bibentry\", \"next\"), ...) opts_blob(constructor = c(\"blob\", \"next\"), ...) opts_character(constructor = c(\"default\"), ..., trim = NULL, fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"), compress = TRUE, unicode_representation = c(\"ascii\", \"latin\", \"character\", \"unicode\"), escape = FALSE) opts_citationFooter(constructor = c(\"citFooter\", \"next\"), ...) opts_citationHeader(constructor = c(\"citHeader\", \"next\"), ...) opts_classGeneratorFunction(constructor = c(\"setClass\"), ...) opts_classPrototypeDef(constructor = c(\"prototype\"), ...) opts_classRepresentation(constructor = c(\"getClassDef\"), ...) opts_complex(constructor = c(\"default\"), ..., trim = NULL, fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"), compress = TRUE) opts_constructive_options(constructor = c(\"opts\", \"next\"), ...) opts_CoordCartesian(constructor = c(\"coord_cartesian\", \"next\", \"environment\"), ...) opts_CoordFixed(constructor = c(\"coord_fixed\", \"next\", \"environment\"), ...) opts_CoordFlip(constructor = c(\"coord_flip\", \"next\", \"environment\"), ...) opts_CoordMap(constructor = c(\"coord_map\", \"next\", \"environment\"), ...) opts_CoordMunch(constructor = c(\"coord_munch\", \"next\", \"environment\"), ...) opts_CoordPolar(constructor = c(\"coord_polar\", \"next\", \"environment\"), ...) opts_CoordQuickmap(constructor = c(\"coord_quickmap\", \"next\", \"environment\"), ...) opts_CoordSf(constructor = c(\"coord_sf\", \"next\", \"environment\"), ...) opts_CoordTrans(constructor = c(\"coord_trans\", \"next\", \"environment\"), ...) opts_data.frame(constructor = c(\"data.frame\", \"read.table\", \"next\", \"list\"), ..., recycle = TRUE) opts_data.table(constructor = c(\"data.table\", \"next\", \"list\"), ..., selfref = FALSE, recycle = TRUE) opts_Date(constructor = c(\".Date\", \"as_date\", \"date\", \"new_date\", \".Date.numeric\", \"as_date.numeric\", \"next\", \"double\"), ..., origin = \"1970-01-01\") opts_difftime(constructor = c(\".difftime\", \"next\"), ...) opts_dm(constructor = c(\"dm\", \"next\", \"list\"), ...) opts_dots(constructor = c(\"default\"), ...) opts_double(constructor = c(\"default\"), ..., trim = NULL, fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"), compress = TRUE) opts_element_blank(constructor = c(\"element_blank\", \"next\", \"list\"), ...) opts_element_grob(constructor = c(\"element_grob\", \"next\", \"list\"), ...) opts_element_line(constructor = c(\"element_line\", \"next\", \"list\"), ...) opts_element_rect(constructor = c(\"element_rect\", \"next\", \"list\"), ...) opts_element_render(constructor = c(\"element_render\", \"next\", \"list\"), ...) opts_element_text(constructor = c(\"element_text\", \"next\", \"list\"), ...) opts_environment(constructor = c(\".env\", \"list2env\", \".environment\", \"new.env\", \"topenv\", \"new_environment\", \"predefine\"), ..., recurse = FALSE) opts_error(constructor = c(\"errorCondition\", \"next\"), ...) opts_expression(constructor = c(\"default\"), ...) opts_externalptr(constructor = c(\"default\"), ...) opts_FacetWrap(constructor = c(\"facet_wrap\", \"ggproto\", \"next\", \"environment\"), ...) opts_factor(constructor = c(\"factor\", \"as_factor\", \"new_factor\", \"next\", \"integer\"), ...) opts_formula(constructor = c(\"default\", \"formula\", \".formula\", \"new_formula\", \"next\"), ..., environment = TRUE) opts_function(constructor = c(\"function\", \".function\", \"new_function\"), ..., environment = TRUE, srcref = FALSE, trim = NULL) opts_ggplot(constructor = c(\"ggplot\", \"next\", \"list\"), ...) opts_ggproto(constructor = c(\"default\", \"next\", \"environment\"), ...) opts_grouped_df(constructor = c(\"default\", \"next\", \"list\"), ...) opts_hexmode(constructor = c(\".hexmode\", \"next\"), ..., integer = FALSE) opts_integer(constructor = c(\"default\"), ..., trim = NULL, fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"), compress = TRUE) opts_integer64(constructor = c(\".integer64\", \"next\", \"double\"), ...) opts_labels(constructor = c(\"labs\", \"next\", \"list\"), ...) opts_language(constructor = c(\"default\"), ...) opts_Layer(constructor = c(\"default\", \"layer\", \"next\", \"environment\"), ...) opts_list(constructor = c(\"list\", \"list2\"), ..., trim = NULL, fill = c(\"vector\", \"new_list\", \"+\", \"...\", \"none\")) opts_logical(constructor = c(\"default\"), ..., trim = NULL, fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"), compress = TRUE) opts_margin(constructor = c(\"margin\", \"next\", \"double\"), ...) opts_matrix(constructor = c(\"matrix\", \"array\", \"cbind\", \"rbind\", \"next\"), ...) opts_mts(constructor = c(\"ts\", \"next\", \"atomic\"), ...) opts_noquote(constructor = c(\"noquote\", \"next\"), ...) opts_NULL(constructor = \"NULL\", ...) opts_numeric_version(constructor = c(\"numeric_version\", \"next\", \"list\"), ...) opts_octmode(constructor = c(\".octmode\", \"next\"), ..., integer = FALSE) opts_ordered(constructor = c(\"ordered\", \"factor\", \"new_ordered\", \"next\", \"integer\"), ...) opts_package_version(constructor = c(\"package_version\", \"next\", \"list\"), ...) opts_pairlist(constructor = c(\"pairlist\", \"pairlist2\"), ...) opts_person(constructor = c(\"person\", \"next\"), ...) opts_POSIXct(constructor = c(\".POSIXct\", \".POSIXct\", \"as_datetime\", \".POSIXct.numeric\", \"as_datetime.numeric\", \"next\", \"atomic\"), ..., origin = \"1970-01-01\") opts_POSIXlt(constructor = c(\".POSIXlt\", \"next\", \"list\"), ...) opts_quosure(constructor = c(\"new_quosure\", \"next\", \"language\"), ...) opts_quosures(constructor = c(\"new_quosures\", \"next\", \"list\"), ...) opts_R_system_version(constructor = c(\"R_system_version\", \"next\", \"list\"), ...) opts_R6(constructor = c(\"R6Class\", \"next\"), ...) opts_R6ClassGenerator(constructor = c(\"R6Class\", \"next\"), ...) opts_raw(constructor = c(\".raw\", \"charToRaw\"), ..., trim = NULL, fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"), compress = TRUE, representation = c(\"hexadecimal\", \"decimal\")) opts_rel(constructor = c(\"rel\", \"next\", \"double\"), ...) opts_rowwise_df(constructor = c(\"default\", \"next\", \"list\"), ...) opts_S4(constructor = c(\"new\"), ...) opts_Scale(constructor = c(\"default\", \"next\", \"environment\"), ...) opts_ScalesList(constructor = c(\"ScalesList\", \"next\", \"list\"), ...) opts_simpleCondition(constructor = c(\"simpleCondition\", \"next\"), ...) opts_simpleError(constructor = c(\"simpleError\", \"next\"), ...) opts_simpleMessage(constructor = c(\"simpleMessage\", \"next\"), ...) opts_simpleUnit(constructor = c(\"unit\", \"next\", \"double\"), ...) opts_simpleWarning(constructor = c(\"simpleWarning\", \"next\"), ...) opts_tbl_df(constructor = c(\"tibble\", \"tribble\", \"next\", \"list\"), ..., trailing_comma = TRUE, justify = c(\"left\", \"right\", \"centre\", \"none\"), recycle = TRUE) opts_theme(constructor = c(\"theme\", \"next\", \"list\"), ...) opts_ts(constructor = c(\"ts\", \"next\", \"atomic\"), ...) opts_uneval(constructor = c(\"aes\", \"next\", \"list\"), ...) opts_vctrs_list_of(constructor = c(\"list_of\", \"next\", \"list\"), ...) opts_waiver(constructor = c(\"waiver\", \"next\", \"list\"), ...) opts_warning(constructor = c(\"warningCondition\", \"next\"), ...) opts_weakref(constructor = c(\"new_weakref\"), ...) opts_xts(constructor = c(\".xts.matrix\", \"next\"), ...) opts_yearmon(constructor = c(\".yearmon\", \"yearmon\", \"next\"), ...) opts_yearqtr(constructor = c(\".yearqtr\", \"yearqtr\", \"next\"), ...) opts_zoo(constructor = c(\"zoo\", \"next\"), ...) opts_zooreg(constructor = c(\"zooreg\", \"next\"), ...)","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build code to recreate an object — construct","text":"","code":"construct(head(cars)) #> data.frame(speed = c(4, 4, 7, 7, 8, 9), dist = c(2, 10, 4, 22, 16, 10)) construct(head(cars), opts_data.frame(\"read.table\")) #> read.table(header = TRUE, text = \" #> speed dist #>    4.   2. #>    4.  10. #>    7.   4. #>    7.  22. #>    8.  16. #>    9.  10. #> \") construct(head(cars), opts_data.frame(\"next\")) #> list(speed = c(4, 4, 7, 7, 8, 9), dist = c(2, 10, 4, 22, 16, 10)) |> #>   structure(row.names = c(NA, -6L), class = \"data.frame\") construct(iris$Species) #> factor(rep(c(\"setosa\", \"versicolor\", \"virginica\"), each = 50L)) construct(iris$Species, opts_atomic(compress = FALSE), opts_factor(\"new_factor\")) #> vctrs::new_factor( #>   c( #>     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, #>     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, #>     1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, #>     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, #>     2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, #>     2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, #>     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, #>     3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L #>   ), #>   levels = c(\"setosa\", \"versicolor\", \"virginica\") #> ) construct_multi(list(a = head(cars), b = iris$Species)) #> a <- data.frame(speed = c(4, 4, 7, 7, 8, 9), dist = c(2, 10, 4, 22, 16, 10)) #>  #> b <- factor(rep(c(\"setosa\", \"versicolor\", \"virginica\"), each = 50L)) #>"},{"path":"https://cynkra.github.io/constructive/reference/construct_clip.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct to clipboard — construct_clip","title":"Construct to clipboard — construct_clip","text":"simple wrapper convenience, construct_clip(x, ...) equivalent print(construct(x, ...), print_mode = \"clipboard\") (idiom might use use clipboard functions). flexible printing options see ?constructive_print_mode.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_clip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct to clipboard — construct_clip","text":"","code":"construct_clip(   x,   ...,   data = NULL,   pipe = NULL,   check = NULL,   unicode_representation = c(\"ascii\", \"latin\", \"character\", \"unicode\"),   escape = FALSE,   pedantic_encoding = FALSE,   compare = compare_options(),   one_liner = FALSE,   template = getOption(\"constructive_opts_template\"),   classes = NULL )"},{"path":"https://cynkra.github.io/constructive/reference/construct_clip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct to clipboard — construct_clip","text":"x object, construct_multi() named list environment. ... Constructive options built opts_*() family functions. See \"Constructive options\" section . data Named list environment objects want detect mention name (opposed deparsing ). Can also contain unnamed nested lists, environments, package names, latter case package exports datasets considered. case conflict, last provided name considered. pipe pipe use, either \"base\" \"magrittr\". Defaults \"base\" R >= 4.2, otherwise \"magrittr\". check Boolean. Whether check created code reproduces object using waldo::compare(). unicode_representation default \"ascii\", means ASCII characters (code point < 128) used construct strings variable names. makes sure homoglyphs (different spaces identically displayed unicode characters) printed differently, avoid possible unfortunate copy paste auto conversion issues. \"latin\" lax uses latin characters (code point < 256). \"character\" shows characters, emojis. Finally \"unicode\" displays characters emojis, dput() . escape Boolean. Whether escape double quotes backslashes. FALSE use single quotes surround strings (including variable element names) containing double quotes, raw strings strings contain backslashes /combination single double quotes. Depending unicode_representation escape = FALSE applied strings. pedantic_encoding Boolean. Whether mark strings \"unknown\" encoding rather explicit native encoding (\"UTF-8\" \"latin1\") necessary reproduce binary representation exactly. detail normally little significance. reason pedantic default constructed code might different console snapshot tests reprexes due latter rounding angles, confusing users. compare Parameters passed waldo::compare(), built compare_options(). one_liner Boolean. Whether collapse output single line code. template list constructive options built opts_*() functions, overriden .... Use set default behavior {constructive}. classes character vector classes use idiomatic constructors available, can provide package instead classes, \"{pkg}\" form, can use minus sign (inside quotes) exclude rather include. default use idiomatic constructors whenever possible. special values \"*none*\" \"*base*\" can used restrict idiomatic construction objects. See construct_dput() construct_base() wrappers around feature.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_clip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct to clipboard — construct_clip","text":"object class 'constructive', invisibly. Called side effects.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_clip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct to clipboard — construct_clip","text":"","code":"if (FALSE) { # \\dontrun{ construct_clip(head(cars)) } # }"},{"path":"https://cynkra.github.io/constructive/reference/construct_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Display diff of object definitions — construct_diff","title":"Display diff of object definitions — construct_diff","text":"calls construct() two objects compares output using diffobj::diffChr().","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display diff of object definitions — construct_diff","text":"","code":"construct_diff(   target,   current,   ...,   data = NULL,   pipe = NULL,   check = TRUE,   compare = compare_options(),   one_liner = FALSE,   template = getOption(\"constructive_opts_template\"),   classes = NULL,   mode = c(\"sidebyside\", \"auto\", \"unified\", \"context\"),   interactive = TRUE )"},{"path":"https://cynkra.github.io/constructive/reference/construct_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display diff of object definitions — construct_diff","text":"target reference object current object compared target ... Constructive options built opts_*() family functions. See \"Constructive options\" section . data Named list environment objects want detect mention name (opposed deparsing ). Can also contain unnamed nested lists, environments, package names, latter case package exports datasets considered. case conflict, last provided name considered. pipe pipe use, either \"base\" \"magrittr\". Defaults \"base\" R >= 4.2, otherwise \"magrittr\". check Boolean. Whether check created code reproduces object using waldo::compare(). compare Parameters passed waldo::compare(), built compare_options(). one_liner Boolean. Whether collapse output single line code. template list constructive options built opts_*() functions, overriden .... Use set default behavior {constructive}. classes character vector classes use idiomatic constructors available, can provide package instead classes, \"{pkg}\" form, can use minus sign (inside quotes) exclude rather include. default use idiomatic constructors whenever possible. special values \"*none*\" \"*base*\" can used restrict idiomatic construction objects. See construct_dput() construct_base() wrappers around feature. mode, interactive passed diffobj::diffChr()","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display diff of object definitions — construct_diff","text":"Returns NULL invisibly, called side effects","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_diff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display diff of object definitions — construct_diff","text":"","code":"if (FALSE) { # \\dontrun{ # some object print the same though they're different # `construct_diff()` shows how they differ : df1 <- data.frame(a=1, b = \"x\") df2 <- data.frame(a=1L, b = \"x\", stringsAsFactors = TRUE) attr(df2, \"some_attribute\") <- \"a value\" df1 df2 construct_diff(df1, df2)   # Those are made easy to compare construct_diff(substr, substring) construct_diff(month.abb, month.name)  # more examples borrowed from {waldo} package construct_diff(c(\"a\", \"b\", \"c\"), c(\"a\", \"B\", \"c\")) construct_diff(c(\"X\", letters), c(letters, \"X\")) construct_diff(list(factor(\"x\")), list(1L)) construct_diff(df1, df2) x <- list(a = list(b = list(c = list(structure(1, e = 1))))) y <- list(a = list(b = list(c = list(structure(1, e = \"a\"))))) construct_diff(x, y) } # }"},{"path":"https://cynkra.github.io/constructive/reference/construct_dput.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct using only low level constructors — construct_dput","title":"Construct using only low level constructors — construct_dput","text":"construct_dput() closer counterpart base::dput() use higher level constructors data.frame() factor(). construct_base() uses higher constructors, classes maintained default base R packages. includes data.frame() factor(), S4 constructors 'method' package etc, data.table() constructors classes packages.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_dput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct using only low level constructors — construct_dput","text":"","code":"construct_dput(   x,   ...,   data = NULL,   pipe = NULL,   check = NULL,   unicode_representation = c(\"ascii\", \"latin\", \"character\", \"unicode\"),   escape = FALSE,   pedantic_encoding = FALSE,   compare = compare_options(),   one_liner = FALSE,   template = getOption(\"constructive_opts_template\") )  construct_base(   x,   ...,   data = NULL,   pipe = NULL,   check = NULL,   unicode_representation = c(\"ascii\", \"latin\", \"character\", \"unicode\"),   escape = FALSE,   pedantic_encoding = FALSE,   compare = compare_options(),   one_liner = FALSE,   template = getOption(\"constructive_opts_template\") )"},{"path":"https://cynkra.github.io/constructive/reference/construct_dput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct using only low level constructors — construct_dput","text":"x object, construct_multi() named list environment. ... Constructive options built opts_*() family functions. See \"Constructive options\" section . data Named list environment objects want detect mention name (opposed deparsing ). Can also contain unnamed nested lists, environments, package names, latter case package exports datasets considered. case conflict, last provided name considered. pipe pipe use, either \"base\" \"magrittr\". Defaults \"base\" R >= 4.2, otherwise \"magrittr\". check Boolean. Whether check created code reproduces object using waldo::compare(). unicode_representation default \"ascii\", means ASCII characters (code point < 128) used construct strings variable names. makes sure homoglyphs (different spaces identically displayed unicode characters) printed differently, avoid possible unfortunate copy paste auto conversion issues. \"latin\" lax uses latin characters (code point < 256). \"character\" shows characters, emojis. Finally \"unicode\" displays characters emojis, dput() . escape Boolean. Whether escape double quotes backslashes. FALSE use single quotes surround strings (including variable element names) containing double quotes, raw strings strings contain backslashes /combination single double quotes. Depending unicode_representation escape = FALSE applied strings. pedantic_encoding Boolean. Whether mark strings \"unknown\" encoding rather explicit native encoding (\"UTF-8\" \"latin1\") necessary reproduce binary representation exactly. detail normally little significance. reason pedantic default constructed code might different console snapshot tests reprexes due latter rounding angles, confusing users. compare Parameters passed waldo::compare(), built compare_options(). one_liner Boolean. Whether collapse output single line code. template list constructive options built opts_*() functions, overriden .... Use set default behavior {constructive}.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_dput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct using only low level constructors — construct_dput","text":"object class 'constructive'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_dput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct using only low level constructors — construct_dput","text":"functions valuable object inspection, might provide stable snapshots, since supporting classes package means default output construct() might change time objects. use higher level constructor base package , excluding instance stats::ts(), utils::person() methods::classGeneratorFunction()), can call construct(x, classes = \"{base}\"","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_dput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct using only low level constructors — construct_dput","text":"","code":"construct_dput(head(iris, 2)) #> list( #>   Sepal.Length = c(5.1, 4.9), #>   Sepal.Width = c(3.5, 3), #>   Petal.Length = c(1.4, 1.4), #>   Petal.Width = c(0.2, 0.2), #>   Species = c(1L, 1L) |> #>     structure(levels = c(\"setosa\", \"versicolor\", \"virginica\"), class = \"factor\") #> ) |> #>   structure(row.names = c(NA, -2L), class = \"data.frame\") construct_base(head(iris, 2)) #> data.frame( #>   Sepal.Length = c(5.1, 4.9), #>   Sepal.Width = c(3.5, 3), #>   Petal.Length = 1.4, #>   Petal.Width = 0.2, #>   Species = factor(\"setosa\", levels = c(\"setosa\", \"versicolor\", \"virginica\")) #> )"},{"path":"https://cynkra.github.io/constructive/reference/construct_dump.html","id":null,"dir":"Reference","previous_headings":"","what":"Dump Constructed Code to a File — construct_dump","title":"Dump Constructed Code to a File — construct_dump","text":"alternative base::dump() using code built constructive.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_dump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dump Constructed Code to a File — construct_dump","text":"","code":"construct_dump(x, path, append = FALSE, ...)"},{"path":"https://cynkra.github.io/constructive/reference/construct_dump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dump Constructed Code to a File — construct_dump","text":"x named list environment. path File connection write . append FALSE, overwrite existing file. TRUE, append existing file. cases, file exist new file created. ... Forwarded construct_multi()","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_dump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dump Constructed Code to a File — construct_dump","text":"Returns NULL invisibly, called side effects.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_issues.html","id":null,"dir":"Reference","previous_headings":"","what":"Show constructive issues — construct_issues","title":"Show constructive issues — construct_issues","text":"Usually called without arguments right imperfect code generation, can also called 'constructive' object .","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_issues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show constructive issues — construct_issues","text":"","code":"construct_issues(x = NULL)"},{"path":"https://cynkra.github.io/constructive/reference/construct_issues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show constructive issues — construct_issues","text":"x object built construct(), NULL latest encountered issues displayed","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_issues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show constructive issues — construct_issues","text":"character vector class \"waldo_compare\"","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_reprex.html","id":null,"dir":"Reference","previous_headings":"","what":"construct_reprex — construct_reprex","title":"construct_reprex — construct_reprex","text":"construct_reprex() constructs objects local environment, caller environment n steps . n > 0 function call also included comment.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_reprex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"construct_reprex — construct_reprex","text":"","code":"construct_reprex(..., n = 0, include_dotted = TRUE)"},{"path":"https://cynkra.github.io/constructive/reference/construct_reprex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"construct_reprex — construct_reprex","text":"... Forwarded construct_multi() n number steps go call stack include_dotted Whether include names starting dots, includes .Random.seed global environment objects like .Class .Generic execution environments S3 methods.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_reprex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"construct_reprex — construct_reprex","text":"object class 'constructive'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_reprex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"construct_reprex — construct_reprex","text":"construct_reprex() call {reprex} package. construct_reprex() builds reproducible data reprex package build reproducible output data. construct_reprex() wraps construct_multi() thus able construct unevaluated arguments using delayedAssign(). means can construct reprexes functions use Non Standard Evaluation. useful trick use options(error = recover) able inspect frames error, use construct_reprex() reproduce data state. construct_reprex() might fail reproduce output functions refer environments caller environment. believe rare simplicity worth rounded corners, encounter limitations please open ticket issue tracker https://github.com/cynkra/constructive/ might expand feature.","code":""},{"path":[]},{"path":"https://cynkra.github.io/constructive/reference/construct_signature.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a function's signature — construct_signature","title":"Construct a function's signature — construct_signature","text":"Construct function's signature one can see right 'Usage' section.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_signature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a function's signature — construct_signature","text":"","code":"construct_signature(x, name = NULL, one_liner = FALSE, style = TRUE)"},{"path":"https://cynkra.github.io/constructive/reference/construct_signature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a function's signature — construct_signature","text":"x function name name function, default use symbol provided x one_liner Boolean. Whether collapse multi-line expressions single line using semicolons. style Boolean. Whether give class \"constructive_code\" output pretty printing.","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_signature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a function's signature — construct_signature","text":"string character vector, class \"constructive_code\" pretty printing style TRUE","code":""},{"path":"https://cynkra.github.io/constructive/reference/construct_signature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a function's signature — construct_signature","text":"","code":"construct_signature(lm) #> lm(formula, data, subset, weights, na.action, method = \"qr\", model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, contrasts = NULL, offset, ...)"},{"path":"https://cynkra.github.io/constructive/reference/constructive-global_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Options — constructive-global_options","title":"Global Options — constructive-global_options","text":"Set options tweak {constructive}'s global behavior, set permanently can edit .RProfile (usethis::edit_r_profile() might help).","code":""},{"path":"https://cynkra.github.io/constructive/reference/constructive-global_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Global Options — constructive-global_options","text":"Set options(constructive_print_mode = <character>) change default value print_mode argument, print.constructive, <character> vector strings among following : \"console\" : default behavior, code printed console \"script\" : code copied new R script \"reprex\" : code shown viewer reprex, reprex (code!) also copied clipboard. \"clipboard\" : constructed code copied clipboard, combined \"reprex\" takes precedence (reprex showed viewer, code without output copied clipboard) Set options(constructive_opts_template = <list>) set default constructive options, see documentation template arg ?construct Set options(constructive_pretty = FALSE) disable pretty printing using {prettycode}","code":""},{"path":"https://cynkra.github.io/constructive/reference/constructive-package.html","id":null,"dir":"Reference","previous_headings":"","what":"constructive: Display Idiomatic Code to Construct Most R Objects — constructive-package","title":"constructive: Display Idiomatic Code to Construct Most R Objects — constructive-package","text":"Prints code can used recreate R objects. sense similar 'base::dput()' 'base::deparse()' 'constructive' strives use idiomatic constructors.","code":""},{"path":[]},{"path":"https://cynkra.github.io/constructive/reference/constructive-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"constructive: Display Idiomatic Code to Construct Most R Objects — constructive-package","text":"Maintainer: Antoine Fabri antoine.fabri@gmail.com contributors: Kirill Müller kirill@cynkra.com (ORCID) [contributor] Jacob Scott jscott2718@gmail.com [contributor] cynkra GmbH mail@cynkra.com (ROR) [funder]","code":""},{"path":"https://cynkra.github.io/constructive/reference/deparse_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Deparse a language object — deparse_call","title":"Deparse a language object — deparse_call","text":"alternative base::deparse() rlang::expr_deparse() handles additional corner cases fails encountering tokens symbols syntactic literals cited alternatives produce non syntactic code.","code":""},{"path":"https://cynkra.github.io/constructive/reference/deparse_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deparse a language object — deparse_call","text":"","code":"deparse_call(   call,   one_liner = FALSE,   pipe = FALSE,   style = TRUE,   collapse = !style,   unicode_representation = c(\"ascii\", \"latin\", \"character\", \"unicode\"),   escape = FALSE,   pedantic_encoding = FALSE )"},{"path":"https://cynkra.github.io/constructive/reference/deparse_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deparse a language object — deparse_call","text":"call call. one_liner Boolean. Whether collapse multi-line expressions single line using semicolons. pipe Boolean. Whether use base pipe disentangle nested calls. works best simple calls. style Boolean. Whether give class \"constructive_code\" output pretty printing. collapse Boolean. Whether collapse output single string, directly visible style TRUE. unicode_representation default \"ascii\", means ASCII characters (code point < 128) used construct strings variable names. makes sure homoglyphs (different spaces identically displayed unicode characters) printed differently, avoid possible unfortunate copy paste auto conversion issues. \"latin\" lax uses latin characters (code point < 256). \"character\" shows characters, emojis. Finally \"unicode\" displays characters emojis, dput() . escape Boolean. Whether escape double quotes backslashes. FALSE use single quotes surround strings (including variable element names) containing double quotes, raw strings strings contain backslashes /combination single double quotes. Depending unicode_representation escape = FALSE applied strings. pedantic_encoding Boolean. Whether mark strings \"unknown\" encoding rather explicit native encoding (\"UTF-8\" \"latin1\") necessary reproduce binary representation exactly. detail normally little significance. reason pedantic default constructed code might different console snapshot tests reprexes due latter rounding angles, confusing users.","code":""},{"path":"https://cynkra.github.io/constructive/reference/deparse_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deparse a language object — deparse_call","text":"string character vector, class \"constructive_code\" pretty printing style TRUE.","code":""},{"path":"https://cynkra.github.io/constructive/reference/deparse_call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deparse a language object — deparse_call","text":"","code":"expr <- quote(foo(bar({this; that}, 1))) deparse_call(expr) #> foo(bar({ #>       this #>       that #>     }, 1)) deparse_call(expr, one_liner = TRUE) #> foo(bar({this; that}, 1)) deparse_call(expr, pipe = TRUE) #> { #>   this #>   that #> } |> bar(1) |> foo() deparse_call(expr, style = FALSE) #> [1] \"foo(bar({\\n      this\\n      that\\n    }, 1))\""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_apply.html","id":null,"dir":"Reference","previous_headings":"","what":".cstr_apply — .cstr_apply","title":".cstr_apply — .cstr_apply","text":"Exported custom constructor design. recurse TRUE (default), recurse construct args insert construction code fun(...) call returned character vector. args already contains code rather object construct one set recurse FALSE.","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".cstr_apply — .cstr_apply","text":"","code":".cstr_apply(   args,   fun = \"list\",   ...,   trailing_comma = FALSE,   recurse = TRUE,   implicit_names = FALSE,   new_line = TRUE,   one_liner = FALSE,   unicode_representation = c(\"ascii\", \"latin\", \"character\", \"unicode\"),   escape = FALSE )"},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":".cstr_apply — .cstr_apply","text":"args list arguments construct recursively, code recurse = FALSE. elements named, arguments named generated code. fun function name use build code form \"fun(...)\" ... Options passed recursively methods trailing_comma Boolean. Whether leave trailing comma last argument code multiline, constructors allow (e.g. tibble::tibble()) makes nicer diffs version control. recurse Boolean. Whether recursively generate code construct args. FALSE arguments expected contain code. implicit_names data provided, compress calls form f(= ) f() new_line Boolean. Forwarded wrap() add line \"fun(\" \")\", forced FALSE one_liner TRUE one_liner Boolean. Whether return one line call. unicode_representation default \"ascii\", means ASCII characters (code point < 128) used construct strings variable names. makes sure homoglyphs (different spaces identically displayed unicode characters) printed differently, avoid possible unfortunate copy paste auto conversion issues. \"latin\" lax uses latin characters (code point < 256). \"character\" shows characters, emojis. Finally \"unicode\" displays characters emojis, dput() . escape Boolean. Whether escape double quotes backslashes. FALSE use single quotes surround strings (including variable element names) containing double quotes, raw strings strings contain backslashes /combination single double quotes. Depending unicode_representation escape = FALSE applied strings.","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":".cstr_apply — .cstr_apply","text":"character vector code","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":".cstr_apply — .cstr_apply","text":"","code":"a <- 1 .cstr_apply(list(a=a), \"foo\") #> [1] \"foo(a = 1)\" .cstr_apply(list(a=a), \"foo\", data = list(a=1)) #> [1] \"foo(a = a)\" .cstr_apply(list(a=a), \"foo\", data = list(a=1), implicit_names = TRUE) #> [1] \"foo(a)\" .cstr_apply(list(b=a), \"foo\", data = list(a=1), implicit_names = TRUE) #> [1] \"foo(b = a)\" .cstr_apply(list(a=\"c(1,2)\"), \"foo\") #> [1] \"foo(a = \\\"c(1,2)\\\")\" .cstr_apply(list(a=\"c(1,2)\"), \"foo\", recurse = FALSE) #> [1] \"foo(a = c(1,2))\""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_combine_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine errors — .cstr_combine_errors","title":"Combine errors — .cstr_combine_errors","text":"Exported custom constructor design. function allows combining independent checks information given failing checks rather first one. parameters except ... forwarded rlang::abort()","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_combine_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine errors — .cstr_combine_errors","text":"","code":".cstr_combine_errors(   ...,   class = NULL,   call,   header = NULL,   body = NULL,   footer = NULL,   trace = NULL,   parent = NULL,   use_cli_format = NULL,   .internal = FALSE,   .file = NULL,   .frame = parent.frame(),   .trace_bottom = NULL )"},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_combine_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine errors — .cstr_combine_errors","text":"... check expressions class Subclass condition. call execution environment currently running function, e.g. call = caller_env(). corresponding function call retrieved mentioned error messages source error. need supply call throwing condition helper function relevant mention message. Can also NULL defused function call respectively display call hard-code code display. information error calls, see Including function calls error messages. header optional header precede errors body, footer Additional bullets. trace trace object created trace_back(). parent Supply parent rethrow error condition handler (e.g. try_fetch()). parent condition object, chained error created, useful want enhance error details, still retaining original information. parent NA, indicates unchained rethrow, useful want take ownership error rethrow custom message better fits surrounding context. Technically, supplying NA lets abort() know called condition handler. helps create simpler backtraces condition handling context hidden default. information error calls, see Including contextual information error chains. use_cli_format Whether format message lazily using cli available. results prettier accurate formatting messages. See local_use_cli() set condition field default package namespace. set TRUE, message character vector individual unformatted lines. newline character \"\\\\n\" already present message reformatted cli's paragraph formatter. See Formatting messages cli. .internal TRUE, footer bullet added message let user know error internal report package authors. argument incompatible footer. .file connection string specifying print message. default depends context, see stdout vs stderr section. .frame throwing context. Used default .trace_bottom, determine internal package mention internal errors .internal TRUE. .trace_bottom Used display simplified backtraces last relevant call frame show. way, irrelevant parts backtraces corresponding condition handling (tryCatch(), try_fetch(), abort(), etc.) hidden default. Defaults call environment, .frame otherwise. Without effect trace supplied.","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_combine_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine errors — .cstr_combine_errors","text":"Returns NULL invisibly, called side effects.","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_construct.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic for object code generation — .cstr_construct","title":"Generic for object code generation — .cstr_construct","text":"Exported custom constructor design. .cstr_construct() basically naked construct(), without checks, style, object post processing etc...","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_construct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic for object code generation — .cstr_construct","text":"","code":".cstr_construct(x, ..., data = NULL, classes = NULL)"},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_construct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic for object code generation — .cstr_construct","text":"x object, construct_multi() named list environment. ... Constructive options built opts_*() family functions. See \"Constructive options\" section . data Named list environment objects want detect mention name (opposed deparsing ). Can also contain unnamed nested lists, environments, package names, latter case package exports datasets considered. case conflict, last provided name considered. classes character vector classes use idiomatic constructors available, can provide package instead classes, \"{pkg}\" form, can use minus sign (inside quotes) exclude rather include. default use idiomatic constructors whenever possible. special values \"*none*\" \"*base*\" can used restrict idiomatic construction objects. See construct_dput() construct_base() wrappers around feature.","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_construct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic for object code generation — .cstr_construct","text":"character vector","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Create constructive options — .cstr_options","title":"Create constructive options — .cstr_options","text":"Exported custom constructor design.","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create constructive options — .cstr_options","text":"","code":".cstr_options(class, ...)"},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create constructive options — .cstr_options","text":"class string. S3 class. ... Options set","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create constructive options — .cstr_options","text":"object class c(paste0(\"constructive_options_\", class), \"constructive_options\")","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert a pipe between two calls — .cstr_pipe","title":"Insert a pipe between two calls — .cstr_pipe","text":"Exported custom constructor design.","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert a pipe between two calls — .cstr_pipe","text":"","code":".cstr_pipe(x, y, ..., pipe = NULL, one_liner = FALSE, indent = TRUE)"},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert a pipe between two calls — .cstr_pipe","text":"x character vector. code left hand side call. y character vector. code right hand side call. ... Implemented collect unused arguments forwarded dots caller environment. pipe string. pipe use, \"plus\" useful ggplot code. one_liner boolean. Whether paste x, pipe y together indent boolean. Whether indent y line (provided x y strings one liners )","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert a pipe between two calls — .cstr_pipe","text":"character vector","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_pipe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert a pipe between two calls — .cstr_pipe","text":"","code":".cstr_pipe(\"iris\", \"head(2)\", pipe = \"magrittr\", one_liner = FALSE) #> [1] \"iris %>%\"  \"  head(2)\" .cstr_pipe(\"iris\", \"head(2)\", pipe = \"magrittr\", one_liner = TRUE) #> [1] \"iris %>% head(2)\""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_repair_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Repair attributes after idiomatic construction — .cstr_repair_attributes","title":"Repair attributes after idiomatic construction — .cstr_repair_attributes","text":"Exported custom constructor design. general case object might attributes given idiomatic construction. .cstr_repair_attributes() sets attributes ignores others.","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_repair_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repair attributes after idiomatic construction — .cstr_repair_attributes","text":"","code":".cstr_repair_attributes(   x,   code,   ...,   ignore = NULL,   idiomatic_class = NULL,   remove = NULL,   flag_s4 = TRUE,   repair_names = FALSE )"},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_repair_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repair attributes after idiomatic construction — .cstr_repair_attributes","text":"x object construct code code constructing object attribute repair ... Forwarded .construct_apply() relevant ignore attributes repaired, .e. expect set constructor already code idiomatic_class class objects constructor produces, x class idiomatic_class need repair class. remove Attributes removed, rarely useful. flag_s4 Boolean. Whether use asS4() code S4 objects, set FALSE constructor produces S4 objects used. repair_names Boolean. Whether repair names attribute. Generally generated constructor needed corner cases","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_repair_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repair attributes after idiomatic construction — .cstr_repair_attributes","text":"character vector","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_wrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrap argument code in function call — .cstr_wrap","title":"Wrap argument code in function call — .cstr_wrap","text":"Exported custom constructor design. Generally called .cstr_apply().","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_wrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrap argument code in function call — .cstr_wrap","text":"","code":".cstr_wrap(args, fun, new_line = FALSE)"},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_wrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrap argument code in function call — .cstr_wrap","text":"args character vector containing code arguments. fun string. name function use function call. Use fun = \"\" wrap parentheses. new_line Boolean. Whether insert new line \"fun(\" closing \")\".","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-cstr_wrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrap argument code in function call — .cstr_wrap","text":"character vector.","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-env.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch environment from memory address — .env","title":"Fetch environment from memory address — .env","text":"designed used constructed output. parents ... arguments processed used display additional information. used improper memory address either fail (likely) output erratic.","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch environment from memory address — .env","text":"","code":".env(address, parents = NULL, ...)"},{"path":"https://cynkra.github.io/constructive/reference/dot-env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch environment from memory address — .env","text":"address Memory address environment parents, ... ignored","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch environment from memory address — .env","text":"environment memory address points .","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-xptr.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a pointer from a memory address — .xptr","title":"Build a pointer from a memory address — .xptr","text":"Base R provide utilities build manipulate external pointers (objects type \"externalptr\"), provide . Objects defined .xptr() stable across sessions,","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-xptr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a pointer from a memory address — .xptr","text":"","code":".xptr(address)"},{"path":"https://cynkra.github.io/constructive/reference/dot-xptr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a pointer from a memory address — .xptr","text":"address Memory address","code":""},{"path":"https://cynkra.github.io/constructive/reference/dot-xptr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a pointer from a memory address — .xptr","text":"external pointer (type \"externalptr\") memory address points .","code":""},{"path":"https://cynkra.github.io/constructive/reference/extend-constructive.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend constructive — extend-constructive","title":"Extend constructive — extend-constructive","text":"export collection functions can used design custom methods .cstr_construct() custom constructors given method. .cstr_new_class() : Open template support new class .cstr_new_constructor() : Open template implement new constructor .cstr_construct() : Low level generic object construction code generation .cstr_repair_attributes()` : Helper repair attributes objects .cstr_options() : Define check options pass custom constructors .cstr_apply() : Build recursively arguments passed constructor .cstr_wrap() : Wrap argument code function code (rarely needed) .cstr_pipe() : Pipe call another (rarely needed) .cstr_combine_errors() : helper function report several errors relevant","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_AsIs.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for the class AsIs — opts_AsIs","title":"Constructive options for the class AsIs — opts_AsIs","text":"options used objects class AsIs. AsIs objects created () prepends \"AsIs\" class attribute.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_AsIs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for the class AsIs — opts_AsIs","text":"","code":"opts_AsIs(constructor = c(\"I\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_AsIs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for the class AsIs — opts_AsIs","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_AsIs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for the class AsIs — opts_AsIs","text":"object class <constructive_options/constructive_options_AsIs>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_AsIs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for the class AsIs — opts_AsIs","text":"Depending constructor, construct object follows: \"\" (default): Use () function \"next\" : Use constructor next supported class. Call .class2() object see order methods tried.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_Date.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options class 'Date' — opts_Date","title":"Constructive options class 'Date' — opts_Date","text":"options used objects class 'date'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_Date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options class 'Date' — opts_Date","text":"","code":"opts_Date(   constructor = c(\"as.Date\", \"as_date\", \"date\", \"new_date\", \"as.Date.numeric\",     \"as_date.numeric\", \"next\", \"double\"),   ...,   origin = \"1970-01-01\" )"},{"path":"https://cynkra.github.io/constructive/reference/opts_Date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options class 'Date' — opts_Date","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object origin Origin used, ignored irrelevant.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_Date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options class 'Date' — opts_Date","text":"object class <constructive_options/constructive_options_Date>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_Date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options class 'Date' — opts_Date","text":"Depending constructor, construct object follows: \".Date\" (default): wrap character vector .Date(), date infinite converted character wrap numeric vector provide origin argument. \"as_date\" : Similar using lubridate::as_date(), difference never need supply origin. \"date\" : Similar using lubridate::date(), support infinite dates fall back lubridate::as_date() encounter . \"new_date\" : wrap numeric vector vctrs::new_date() \".Date.numeric\" : wrap numeric vector .Date() use provided origin \"as_date.numeric\" : using lubridate::as_date() use provided origin \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"double\" : define double vector repair attributes data appropriate constructor fall back another one appropriately.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_Layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'Layer' (ggplot2) — opts_Layer","title":"Constructive options for class 'Layer' (ggplot2) — opts_Layer","text":"options used objects class 'Layer'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_Layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'Layer' (ggplot2) — opts_Layer","text":"","code":"opts_Layer(constructor = c(\"default\", \"layer\", \"next\", \"environment\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_Layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'Layer' (ggplot2) — opts_Layer","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_Layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'Layer' (ggplot2) — opts_Layer","text":"object class <constructive_options/constructive_options_Layer>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_Layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'Layer' (ggplot2) — opts_Layer","text":"Depending constructor, construct object follows: \"default\" : attempt use function originally used create plot. \"layer\" : use ggplot2::layer() function \"environment\" : Reconstruct object using general environment method (can tweaked using opts_environment()) latter constructor one reproduces object exactly since Layers environments environments exactly copied (see ?opts_environment)","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_POSIXct.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'POSIXct' — opts_POSIXct","title":"Constructive options for class 'POSIXct' — opts_POSIXct","text":"options used objects class 'POSIXct'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_POSIXct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'POSIXct' — opts_POSIXct","text":"","code":"opts_POSIXct(   constructor = c(\"as.POSIXct\", \".POSIXct\", \"as_datetime\", \"as.POSIXct.numeric\",     \"as_datetime.numeric\", \"next\", \"atomic\"),   ...,   origin = \"1970-01-01\" )"},{"path":"https://cynkra.github.io/constructive/reference/opts_POSIXct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'POSIXct' — opts_POSIXct","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object origin Origin used, ignored irrelevant.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_POSIXct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'POSIXct' — opts_POSIXct","text":"object class <constructive_options/constructive_options_POSIXct>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_POSIXct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'POSIXct' — opts_POSIXct","text":"Depending constructor, construct object follows: \".POSIXct\" (default): Build object using .POSIXct() call character vector. \".POSIXct\" : Build object using .POSIXct() call numeric vector. \"as_datetime\" : Build object using lubridate::as_datetime() call character vector. \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"atomic\" : define atomic vector repair attributes. data appropriate constructor fall back another one appropriately. particular corrupted POSIXct objects defined top integers (worse) constructed \".POSIXct\" constructor.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_POSIXlt.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'POSIXlt' — opts_POSIXlt","title":"Constructive options for class 'POSIXlt' — opts_POSIXlt","text":"options used objects class 'POSIXlt'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_POSIXlt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'POSIXlt' — opts_POSIXlt","text":"","code":"opts_POSIXlt(constructor = c(\"as.POSIXlt\", \"next\", \"list\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_POSIXlt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'POSIXlt' — opts_POSIXlt","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_POSIXlt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'POSIXlt' — opts_POSIXlt","text":"object class <constructive_options/constructive_options_POSIXlt>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_POSIXlt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'POSIXlt' — opts_POSIXlt","text":"Depending constructor, construct object follows: \".POSIXlt\" (default): Build object using .POSIXlt() call character vector. \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"list\" : define list repair attributes.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_R6.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'R6' — opts_R6","title":"Constructive options for class 'R6' — opts_R6","text":"options used objects class 'R6'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_R6.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'R6' — opts_R6","text":"","code":"opts_R6(constructor = c(\"R6Class\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_R6.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'R6' — opts_R6","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_R6.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'R6' — opts_R6","text":"object class <constructive_options/constructive_options_R6>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_R6.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'R6' — opts_R6","text":"Depending constructor, construct object follows: \"R6Class\" (default): build object using R6Class()$new(), see details. \"next\" : Use constructor next supported class. Objects class \"R6\" harder construct \"R6ClassGenerator\" objects,  'constructive' know default constructor (.e. class generator) used build . build class generator generates object default. generated code form R6Class()$new(). Another layer complexity added object features initialize() method, implement class generator might change behavior $new() return wrong result (fail). reason initialize() method exists repaired extra step. construct_diff() works well inspect differences two R6 objects alternatives like waldo::compare() base::.equal() return anything informative.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_R6ClassGenerator.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'R6ClassGenerator' — opts_R6ClassGenerator","title":"Constructive options for class 'R6ClassGenerator' — opts_R6ClassGenerator","text":"options used objects class 'R6ClassGenerator'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_R6ClassGenerator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'R6ClassGenerator' — opts_R6ClassGenerator","text":"","code":"opts_R6ClassGenerator(constructor = c(\"R6Class\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_R6ClassGenerator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'R6ClassGenerator' — opts_R6ClassGenerator","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_R6ClassGenerator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'R6ClassGenerator' — opts_R6ClassGenerator","text":"object class <constructive_options/constructive_options_R6ClassGenerator>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_R6ClassGenerator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'R6ClassGenerator' — opts_R6ClassGenerator","text":"Depending constructor, construct object follows: \"R6Class\" (default): build object using R6Class(). \"next\" : Use constructor next supported class.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_R_system_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for R_system_version — opts_R_system_version","title":"Constructive options for R_system_version — opts_R_system_version","text":"Depending constructor, construct object follows: \"R_system_version\" : use R_system_version() \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. usually equivalent \"list\" \"list\" : define list repair attributes","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_R_system_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for R_system_version — opts_R_system_version","text":"","code":"opts_R_system_version(constructor = c(\"R_system_version\", \"next\", \"list\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_R_system_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for R_system_version — opts_R_system_version","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_R_system_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for R_system_version — opts_R_system_version","text":"object class <constructive_options/constructive_options_R_system_version>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_S4.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'S4' — opts_S4","title":"Constructive options for class 'S4' — opts_S4","text":"options used objects class 'S4'. Note support S4 experimental might easily break. Please report issues .","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_S4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'S4' — opts_S4","text":"","code":"opts_S4(constructor = c(\"new\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_S4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'S4' — opts_S4","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_S4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'S4' — opts_S4","text":"object class <constructive_options/constructive_options_S4>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for arrays — opts_array","title":"Constructive options for arrays — opts_array","text":"options used arrays. Note arrays can built top vectors, lists expressions. Canonical arrays implicit class \"array\" shown class() \"array\" part class attribute.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for arrays — opts_array","text":"","code":"opts_array(constructor = c(\"array\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for arrays — opts_array","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for arrays — opts_array","text":"object class <constructive_options/constructive_options_array>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for arrays — opts_array","text":"Depending constructor, construct object follows: \"array\" (default): Use array() function \"next\" : Use constructor next supported class. Call .class2() object see order methods tried.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_atomic.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for atomic types — opts_atomic","title":"Constructive options for atomic types — opts_atomic","text":"options used atomic types (\"logical\", \"integer\", \"numeric\", \"complex\", \"character\" \"raw\"). can also directly provided atomic types opts_*() function, case latter precedence.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_atomic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for atomic types — opts_atomic","text":"","code":"opts_atomic(   ...,   trim = NULL,   fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"),   compress = TRUE )"},{"path":"https://cynkra.github.io/constructive/reference/opts_atomic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for atomic types — opts_atomic","text":"... Additional options used user defined constructors opts object trim NULL integerish. Maximum elements showed trimmed. Note necessarily produce code reproduce input. code parse without failure evaluation might fail. fill String. Method use represent trimmed elements. compress Boolean. TRUE instead c() Use seq(), rep() relevant simplify output.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_atomic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for atomic types — opts_atomic","text":"object class <constructive_options/constructive_options_atomic>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_atomic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for atomic types — opts_atomic","text":"trim provided, depending fill present trimmed elements followed: \"default\" : Use default atomic constructors, instance c(\"\", \"b\", \"c\") might become c(\"\", character(2)). \"rlang\" : Use rlang atomic constructors, instance c(\"\", \"b\", \"c\") might become c(\"\", rlang::new_character(2)), rlang constructors create vectors NAs, different default option. \"+\": Use unary +, instance c(\"\", \"b\", \"c\") might become c(\"\", +2). \"...\": Use ..., instance c(\"\", \"b\", \"c\") might become c(\"\", ...) \"none\": represent trimmed elements. Depending case choices might generate code executed. 2 former options likely succeed produce output type dimensions recursively. least case data frame.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_atomic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructive options for atomic types — opts_atomic","text":"","code":"construct(iris, opts_atomic(trim = 2), check = FALSE) # fill = \"default\" #> data.frame( #>   Sepal.Length = c(5.1, 4.9, numeric(148)), #>   Sepal.Width = c(3.5, 3, numeric(148)), #>   Petal.Length = c(1.4, 1.4, numeric(148)), #>   Petal.Width = c(0.2, 0.2, numeric(148)), #>   Species = factor(c(\"setosa\", \"setosa\", character(148))) #> ) construct(iris, opts_atomic(trim = 2, fill = \"rlang\"), check = FALSE) #> data.frame( #>   Sepal.Length = c(5.1, 4.9, rlang::new_double(148)), #>   Sepal.Width = c(3.5, 3, rlang::new_double(148)), #>   Petal.Length = c(1.4, 1.4, rlang::new_double(148)), #>   Petal.Width = c(0.2, 0.2, rlang::new_double(148)), #>   Species = factor(c(\"setosa\", \"setosa\", rlang::new_character(148))) #> ) construct(iris, opts_atomic(trim = 2, fill = \"+\"), check = FALSE) #> data.frame( #>   Sepal.Length = c(5.1, 4.9, +148), #>   Sepal.Width = c(3.5, 3, +148), #>   Petal.Length = c(1.4, 1.4, +148), #>   Petal.Width = c(0.2, 0.2, +148), #>   Species = factor(c(\"setosa\", \"setosa\", +148)) #> ) construct(iris, opts_atomic(trim = 2, fill = \"...\"), check = FALSE) #> data.frame( #>   Sepal.Length = c(5.1, 4.9, ...), #>   Sepal.Width = c(3.5, 3, ...), #>   Petal.Length = c(1.4, 1.4, ...), #>   Petal.Width = c(0.2, 0.2, ...), #>   Species = factor(c(\"setosa\", \"setosa\", ...)) #> ) construct(iris, opts_atomic(trim = 2, fill = \"none\"), check = FALSE) #> data.frame( #>   Sepal.Length = c(5.1, 4.9), #>   Sepal.Width = c(3.5, 3), #>   Petal.Length = c(1.4, 1.4), #>   Petal.Width = c(0.2, 0.2), #>   Species = factor(c(\"setosa\", \"setosa\")) #> ) construct(iris, opts_atomic(trim = 2, fill = \"none\"), check = FALSE) #> data.frame( #>   Sepal.Length = c(5.1, 4.9), #>   Sepal.Width = c(3.5, 3), #>   Petal.Length = c(1.4, 1.4), #>   Petal.Width = c(0.2, 0.2), #>   Species = factor(c(\"setosa\", \"setosa\")) #> ) x <- c(\"a a\", \"a\\U000000A0a\", \"a\\U00002002a\", \"\\U430 \\U430\") construct(x, opts_atomic(unicode_representation = \"unicode\")) #> Warning: `unicode_representation` and `escape` are deprecated in `opts_atomic()` #> ℹ Set those in `opts_character()` instead for the same effect #> ℹ Set those directly in the main function (e.g. `construct()`) to apply them on both character vectors, symbols and argument names #> c(\"a a\", \"a a\", \"a a\", \"а а\") construct(x, opts_atomic(unicode_representation = \"character\")) #> Warning: `unicode_representation` and `escape` are deprecated in `opts_atomic()` #> ℹ Set those in `opts_character()` instead for the same effect #> ℹ Set those directly in the main function (e.g. `construct()`) to apply them on both character vectors, symbols and argument names #> c(\"a a\", \"a a\", \"a a\", \"а а\") construct(x, opts_atomic(unicode_representation = \"latin\")) #> Warning: `unicode_representation` and `escape` are deprecated in `opts_atomic()` #> ℹ Set those in `opts_character()` instead for the same effect #> ℹ Set those directly in the main function (e.g. `construct()`) to apply them on both character vectors, symbols and argument names #> c(\"a a\", \"a a\", \"a\\U{2002}a\", \"\\U{430} \\U{430}\") construct(x, opts_atomic(unicode_representation = \"ascii\")) #> Warning: `unicode_representation` and `escape` are deprecated in `opts_atomic()` #> ℹ Set those in `opts_character()` instead for the same effect #> ℹ Set those directly in the main function (e.g. `construct()`) to apply them on both character vectors, symbols and argument names #> c(\"a a\", \"a\\U{A0}a\", \"a\\U{2002}a\", \"\\U{430} \\U{430}\")"},{"path":"https://cynkra.github.io/constructive/reference/opts_blob.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'blob' — opts_blob","title":"Constructive options for class 'blob' — opts_blob","text":"options used objects class 'blob'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_blob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'blob' — opts_blob","text":"","code":"opts_blob(constructor = c(\"blob\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_blob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'blob' — opts_blob","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_blob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'blob' — opts_blob","text":"object class <constructive_options/constructive_options_blob>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_blob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'blob' — opts_blob","text":"Depending constructor, construct object follows: \"blob\" (default): Use blob::blob() raw object. \"new_blob\" (default): Use blob::new_blob() list raw objects. \".blob\" : Use blob::as_blob() character vector Use opts_raw() opts_character() tweak construction raw character objects constructed part blob construction.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_character.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for type 'character' — opts_character","title":"Constructive options for type 'character' — opts_character","text":"options used objects type 'character'. type single native constructor, additional options can set. unicode_representation escape usually better set main function (construct() ) apply strings symbols argument names well. set options atomic types see opts_atomic().","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_character.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for type 'character' — opts_character","text":"","code":"opts_character(   constructor = c(\"default\"),   ...,   trim = NULL,   fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"),   compress = TRUE,   unicode_representation = c(\"ascii\", \"latin\", \"character\", \"unicode\"),   escape = FALSE )"},{"path":"https://cynkra.github.io/constructive/reference/opts_character.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for type 'character' — opts_character","text":"constructor String. Method used construct object, often name function. ... Constructive options built opts_*() family functions. See \"Constructive options\" section . trim NULL integerish. Maximum elements showed trimmed. Note necessarily produce code reproduce input. code parse without failure evaluation might fail. fill String. Method use represent trimmed elements. See ?opts_atomic compress Boolean. TRUE instead c() Use seq(), rep() relevant simplify output. unicode_representation default \"ascii\", means ASCII characters (code point < 128) used construct strings variable names. makes sure homoglyphs (different spaces identically displayed unicode characters) printed differently, avoid possible unfortunate copy paste auto conversion issues. \"latin\" lax uses latin characters (code point < 256). \"character\" shows characters, emojis. Finally \"unicode\" displays characters emojis, dput() . escape Boolean. Whether escape double quotes backslashes. FALSE use single quotes surround strings (including variable element names) containing double quotes, raw strings strings contain backslashes /combination single double quotes. Depending unicode_representation escape = FALSE applied strings.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_character.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for type 'character' — opts_character","text":"object class <constructive_options/constructive_options_character>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_classGeneratorFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'classGeneratorFunction' — opts_classGeneratorFunction","title":"Constructive options for class 'classGeneratorFunction' — opts_classGeneratorFunction","text":"options used objects class 'classGeneratorFunction'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_classGeneratorFunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'classGeneratorFunction' — opts_classGeneratorFunction","text":"","code":"opts_classGeneratorFunction(constructor = c(\"setClass\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_classGeneratorFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'classGeneratorFunction' — opts_classGeneratorFunction","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_classGeneratorFunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'classGeneratorFunction' — opts_classGeneratorFunction","text":"object class <constructive_options/constructive_options_classGeneratorFunction>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_classPrototypeDef.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'classPrototypeDef' — opts_classPrototypeDef","title":"Constructive options for class 'classPrototypeDef' — opts_classPrototypeDef","text":"options used objects class 'classPrototypeDef'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_classPrototypeDef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'classPrototypeDef' — opts_classPrototypeDef","text":"","code":"opts_classPrototypeDef(constructor = c(\"prototype\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_classPrototypeDef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'classPrototypeDef' — opts_classPrototypeDef","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_classPrototypeDef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'classPrototypeDef' — opts_classPrototypeDef","text":"object class <constructive_options/constructive_options_classPrototypeDef>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_classRepresentation.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'classRepresentation' — opts_classRepresentation","title":"Constructive options for class 'classRepresentation' — opts_classRepresentation","text":"options used objects class 'classRepresentation'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_classRepresentation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'classRepresentation' — opts_classRepresentation","text":"","code":"opts_classRepresentation(constructor = c(\"getClassDef\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_classRepresentation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'classRepresentation' — opts_classRepresentation","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_classRepresentation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'classRepresentation' — opts_classRepresentation","text":"object class <constructive_options/constructive_options_classRepresentation>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_complex.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for type 'complex' — opts_complex","title":"Constructive options for type 'complex' — opts_complex","text":"options used objects type 'complex'. type single native constructor, additional options can set. set options atomic types see opts_atomic().","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_complex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for type 'complex' — opts_complex","text":"","code":"opts_complex(   constructor = c(\"default\"),   ...,   trim = NULL,   fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"),   compress = TRUE )"},{"path":"https://cynkra.github.io/constructive/reference/opts_complex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for type 'complex' — opts_complex","text":"constructor String. Method used construct object, often name function. ... Additional options used user defined constructors opts object trim NULL integerish. Maximum elements showed trimmed. Note necessarily produce code reproduce input. code parse without failure evaluation might fail. fill String. Method use represent trimmed elements. See ?opts_atomic compress Boolean. TRUE instead c() Use seq(), rep() relevant simplify output.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_complex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for type 'complex' — opts_complex","text":"object class <constructive_options/constructive_options_complex>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_constructive_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for the class constructive_options — opts_constructive_options","title":"Constructive options for the class constructive_options — opts_constructive_options","text":"options used objects class constructive_options.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_constructive_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for the class constructive_options — opts_constructive_options","text":"","code":"opts_constructive_options(constructor = c(\"opts\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_constructive_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for the class constructive_options — opts_constructive_options","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_constructive_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for the class constructive_options — opts_constructive_options","text":"object class <constructive_options/constructive_options_constructive_options>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_constructive_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for the class constructive_options — opts_constructive_options","text":"Depending constructor, construct object follows: \"opts\" : Use relevant constructive::opts_?() function. \"next\" : Use constructor next supported class. Call .class2() object see order methods tried.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'data.frame' — opts_data.frame","title":"Constructive options for class 'data.frame' — opts_data.frame","text":"options used objects class 'data.frame'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'data.frame' — opts_data.frame","text":"","code":"opts_data.frame(   constructor = c(\"data.frame\", \"read.table\", \"next\", \"list\"),   ...,   recycle = TRUE )"},{"path":"https://cynkra.github.io/constructive/reference/opts_data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'data.frame' — opts_data.frame","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object recycle Boolean. \"data.frame\" constructor. Whether recycle scalars compress output.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_data.frame.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'data.frame' — opts_data.frame","text":"object class <constructive_options/constructive_options_data.frame>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_data.frame.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'data.frame' — opts_data.frame","text":"Depending constructor, construct object follows: \"data.frame\" (default): Wrap column definitions data.frame() call. columns lists data frames, wrap column definitions tibble::tibble(). use .data.frame(). \"read.table\" : build object using read.table() possible, fall back data.frame(). \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"list\" : Use list() treat class regular attribute.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_data.table.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'data.table' — opts_data.table","title":"Constructive options for class 'data.table' — opts_data.table","text":"options used objects class 'data.table'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_data.table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'data.table' — opts_data.table","text":"","code":"opts_data.table(   constructor = c(\"data.table\", \"next\", \"list\"),   ...,   selfref = FALSE,   recycle = TRUE )"},{"path":"https://cynkra.github.io/constructive/reference/opts_data.table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'data.table' — opts_data.table","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object selfref Boolean. Whether include .internal.selfref attribute. probably useful, hence default, waldo::compare() used assess output fidelity check , really need generate code builds object identical() input need set TRUE.#' recycle Boolean. Whether recycle scalars compress output.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_data.table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'data.table' — opts_data.table","text":"object class <constructive_options/constructive_options_data.table>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_data.table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'data.table' — opts_data.table","text":"Depending constructor, construct object follows: \"data.table\" (default): Wrap column definitions data.table() call. \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"list\" : Use list() treat class regular attribute.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_dm.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options class 'dm' — opts_dm","title":"Constructive options class 'dm' — opts_dm","text":"options used objects class 'dm'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_dm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options class 'dm' — opts_dm","text":"","code":"opts_dm(constructor = c(\"dm\", \"next\", \"list\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_dm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options class 'dm' — opts_dm","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_dm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options class 'dm' — opts_dm","text":"object class <constructive_options/constructive_options_dm>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_dm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options class 'dm' — opts_dm","text":"Depending constructor, construct object follows: \"dm\" (default): use dm::dm() functions dm adjust content. \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"list\" : Use list() treat class regular attribute.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_dots.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for type '...' — opts_dots","title":"Constructive options for type '...' — opts_dots","text":"options used objects type '...'. rarely encountered practice. default function useless nothing can set, provided case users want extend method constructors.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_dots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for type '...' — opts_dots","text":"","code":"opts_dots(constructor = c(\"default\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_dots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for type '...' — opts_dots","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_dots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for type '...' — opts_dots","text":"object class <constructive_options/constructive_options_dots>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_dots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for type '...' — opts_dots","text":"Depending constructor, construct object follows: \"default\" : use construct (function(...) get(\\\"...\\\"))(= x, y) evaluate correct environment.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_double.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for type 'double' — opts_double","title":"Constructive options for type 'double' — opts_double","text":"options used objects type 'double'. type single native constructor, additional options can set. set options atomic types see opts_atomic().","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_double.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for type 'double' — opts_double","text":"","code":"opts_double(   constructor = c(\"default\"),   ...,   trim = NULL,   fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"),   compress = TRUE )"},{"path":"https://cynkra.github.io/constructive/reference/opts_double.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for type 'double' — opts_double","text":"constructor String. Method used construct object, often name function. ... Additional options used user defined constructors opts object trim NULL integerish. Maximum elements showed trimmed. Note necessarily produce code reproduce input. code parse without failure evaluation might fail. fill String. Method use represent trimmed elements. See ?opts_atomic compress Boolean. TRUE instead c() Use seq(), rep() relevant simplify output.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_double.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for type 'double' — opts_double","text":"object class <constructive_options/constructive_options_double>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for type 'environment' — opts_environment","title":"Constructive options for type 'environment' — opts_environment","text":"Environments use reference semantics, copied. attempt copy environment indeed yield different environment identical(env, copy) FALSE. Moreover environments parent (exceptions emptyenv() rare cases parent NULL) thus copy environment way point parent, copy .  reason environments constructive's cryptonite. make objects impossible reproduce exactly. since every function formula one hard avoid.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for type 'environment' — opts_environment","text":"","code":"opts_environment(   constructor = c(\".env\", \"list2env\", \"as.environment\", \"new.env\", \"topenv\",     \"new_environment\", \"predefine\"),   ...,   recurse = FALSE )"},{"path":"https://cynkra.github.io/constructive/reference/opts_environment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for type 'environment' — opts_environment","text":"constructor String. Name function used construct environment, see Constructors section. ... Additional options used user defined constructors opts object recurse Boolean. considered constructor \"list2env\" \"new_environment\". Whether attempt recreate parent environments known environment found, FALSE (default) use topenv() find known ancestor set parent.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_environment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for type 'environment' — opts_environment","text":"object class <constructive_options/constructive_options_environment>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_environment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for type 'environment' — opts_environment","text":"case can build code points specific environment, namely: .GlobalEnv, .BaseNamespaceEnv, baseenv() emptyenv() used construct global environment, base namespace, base package environment empty environment Namespaces constructed using asNamespace(\"pkg\") Package environments constructed using .environment(\"package:pkg\") \"imports\" environments constructed parent.env(asNamespace(\"pkg\")) \"lazydata\" environments constructed getNamespaceInfo(\"pkg\", \"lazydata\") default environments use constructive's function constructive::.env(), fetches environment memory address provides additional information sequence parents reach special environment (enumerated ). advantage approach readable object accurately reproduced. inconvenient stable sessions. environment NULL parent always constructed constructive::.env(), whatever choice constructor. Often however wish able reproduce scratch similar environment, might run constructed code later new session. offer different different options , different trade-offs regarding accuracy verbosity. {constructive} signal difference can reproduce equivalent environment, defined containing values equivalent parent. See also ignore_function_env argument ?compare_options, disables check environments function.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_environment.html","id":"constructors","dir":"Reference","previous_headings":"","what":"Constructors","title":"Constructive options for type 'environment' — opts_environment","text":"might set constructor argument : \".env\" (default): use constructive::.env() construct environment memory address. \"list2env\": construct environment list use base::list2env() convert environment assign parent. default use parent first special environment find going ancestors, can print code use .env(). recurse TRUE parent built recursively ancestors created meet known environment, might verbose fail environments nested deep circular relationship. environment empty use new.env(parent=) economic syntax. \"new_environment\" : Similar , using rlang::new_environment(). \"new.env\" : environments recreated code \"base::new.env()\", without argument, effectively creating empty environment child local (often global) environment. enough cases environment matter (matters long inherits local environment), often case formulas. recurse ignored. \".environment\" : attempt construct environment list use base::.environment() top , .environment(list(=1, b=2)), contain variables original environment parent emptyenv(). recurse ignored. \"topenv\" : construct base::topenv(x), see ?topenv. recurse ignored. accurate can constructing special environments. \"predefine\" : Building environments scratch using methods can verbose, sometimes redundant sometimes even impossible due circularity (e.g. environment referencing ).  \"predefine\" define environments content  object returning call, using placeholder names ..env.1.., ..env.2.. etc. caveat created code single call create objects workspace. recurse ignored.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_externalptr.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for type 'externalptr' — opts_externalptr","title":"Constructive options for type 'externalptr' — opts_externalptr","text":"options used objects type 'externalptr'. default function useless nothing can set, provided case users wan extend method constructors.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_externalptr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for type 'externalptr' — opts_externalptr","text":"","code":"opts_externalptr(constructor = c(\"default\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_externalptr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for type 'externalptr' — opts_externalptr","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_externalptr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for type 'externalptr' — opts_externalptr","text":"object class <constructive_options/constructive_options_externalptr>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_externalptr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for type 'externalptr' — opts_externalptr","text":"Depending constructor, construct object follows: \"default\" : use special function constructive","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'factor' — opts_factor","title":"Constructive options for class 'factor' — opts_factor","text":"options used objects class 'factor'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'factor' — opts_factor","text":"","code":"opts_factor(   constructor = c(\"factor\", \"as_factor\", \"new_factor\", \"next\", \"integer\"),   ... )"},{"path":"https://cynkra.github.io/constructive/reference/opts_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'factor' — opts_factor","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'factor' — opts_factor","text":"object class <constructive_options/constructive_options_factor>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_factor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'factor' — opts_factor","text":"Depending constructor, construct object follows: \"factor\" (default): Build object using factor(), levels defined explicitly alphabetical order (locale dependent!) \"as_factor\" : Build object using forcats::as_factor() whenever possible, .e. levels defined order appearance vector. Otherwise falls back \"factor\" constructor. \"new_factor\" : Build object using vctrs::new_factor(). Levels always defined explicitly. \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"integer\" : define integer vector repair attributes.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for formulas — opts_formula","title":"Constructive options for formulas — opts_formula","text":"options used formulas, defined calls ~, regardless \"class\" attribute.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for formulas — opts_formula","text":"","code":"opts_formula(   constructor = c(\"default\", \"formula\", \"as.formula\", \"new_formula\", \"next\"),   ...,   environment = TRUE )"},{"path":"https://cynkra.github.io/constructive/reference/opts_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for formulas — opts_formula","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object environment Boolean. Whether attempt construct environment, makes difference construct . Depending constructor, construct formula follows: \"default\": construct formula common way using ~ operator. \"formula\" : deparse formula string use base::formula() top . \".formula\" : , using base::.formula(). \"new_formula\" : extract sides formula separate language objects feed rlang::new_formula(), along reconstructed environment relevant.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for formulas — opts_formula","text":"object class <constructive_options/constructive_options_formula>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for functions — opts_function","title":"Constructive options for functions — opts_function","text":"options used functions, .e. objects type \"closure\", \"special\" \"builtin\".","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for functions — opts_function","text":"","code":"opts_function(   constructor = c(\"function\", \"as.function\", \"new_function\"),   ...,   environment = TRUE,   srcref = FALSE,   trim = NULL )"},{"path":"https://cynkra.github.io/constructive/reference/opts_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for functions — opts_function","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object environment Boolean. Whether reconstruct function's environment. srcref Boolean. Whether attempt reconstruct function's srcref. trim NULL integerish. Maximum lines showed body trimmed, replacing code .... Note necessarily produce code reproduce input, parse evaluate without failure.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for functions — opts_function","text":"object class <constructive_options/constructive_options_function>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for functions — opts_function","text":"Depending constructor, construct object follows: \"function\" (default): Build object using standard function() {} definition. set environment default, unless environment set TRUE. srcref available, srcref matches function's definition, trim left NULL, code returned using srcref, comments shown output construct(). rare case ast body function contains non syntactic nodes constructor used falls back \".function\" constructor. \".function\" : Build object using .function() call. back data.frame(). \"new_function\" : Build object using rlang::new_function() call.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'ggplot' — opts_ggplot","title":"Constructive options for class 'ggplot' — opts_ggplot","text":"options used objects class 'ggplot'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'ggplot' — opts_ggplot","text":"","code":"opts_ggplot(constructor = c(\"ggplot\", \"next\", \"list\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'ggplot' — opts_ggplot","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'ggplot' — opts_ggplot","text":"object class <constructive_options/constructive_options_ggplot>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_ggplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'ggplot' — opts_ggplot","text":"Depending constructor, construct object follows: \"ggplot\" (default): Use ggplot2::ggplot() \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"list\" : Use list() treat class regular attribute.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_grouped_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'grouped_df' — opts_grouped_df","title":"Constructive options for class 'grouped_df' — opts_grouped_df","text":"options used objects class 'grouped_df'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_grouped_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'grouped_df' — opts_grouped_df","text":"","code":"opts_grouped_df(constructor = c(\"default\", \"next\", \"list\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_grouped_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'grouped_df' — opts_grouped_df","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_grouped_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'grouped_df' — opts_grouped_df","text":"object class <constructive_options/constructive_options_factor>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_grouped_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'grouped_df' — opts_grouped_df","text":"Depending constructor, construct object follows: \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"list\" : define list object repair attributes.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_hexmode.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'hexmode' — opts_hexmode","title":"Constructive options for class 'hexmode' — opts_hexmode","text":"options used objects class 'hexmode'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_hexmode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'hexmode' — opts_hexmode","text":"","code":"opts_hexmode(constructor = c(\"as.hexmode\", \"next\"), ..., integer = FALSE)"},{"path":"https://cynkra.github.io/constructive/reference/opts_hexmode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'hexmode' — opts_hexmode","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object integer Whether use .hexmode() integer rather character","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_hexmode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'hexmode' — opts_hexmode","text":"object class <constructive_options/constructive_options_hexmode>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_hexmode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'hexmode' — opts_hexmode","text":"Depending constructor, construct object follows: \".hexmode\" (default): build object using .hexmode() \"next\" : Use constructor next supported class.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for type 'integer' — opts_integer","title":"Constructive options for type 'integer' — opts_integer","text":"options used objects type 'integer'. type single native constructor, additional options can set. set options atomic types see opts_atomic().","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for type 'integer' — opts_integer","text":"","code":"opts_integer(   constructor = c(\"default\"),   ...,   trim = NULL,   fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"),   compress = TRUE )"},{"path":"https://cynkra.github.io/constructive/reference/opts_integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for type 'integer' — opts_integer","text":"constructor String. Method used construct object, often name function. ... Additional options used user defined constructors opts object trim NULL integerish. Maximum elements showed trimmed. Note necessarily produce code reproduce input. code parse without failure evaluation might fail. fill String. Method use represent trimmed elements. See ?opts_atomic compress Boolean. TRUE instead c() Use seq(), rep() relevant simplify output.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for type 'integer' — opts_integer","text":"object class <constructive_options/constructive_options_integer>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_integer64.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'integer64' — opts_integer64","title":"Constructive options for class 'integer64' — opts_integer64","text":"options used objects class 'integer64'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_integer64.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'integer64' — opts_integer64","text":"","code":"opts_integer64(constructor = c(\"as.integer64\", \"next\", \"double\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_integer64.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'integer64' — opts_integer64","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_integer64.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'integer64' — opts_integer64","text":"object class <constructive_options/constructive_options_integer64>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_integer64.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'integer64' — opts_integer64","text":"Depending constructor, construct object follows: \".integer64\" (default): Build object using .integer64() character vector. \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"double\" : define atomic vector repair attributes. recommend \"next\" \"double\" constructors class give incorrect results negative NA \"integer64\" objects due quirks implementation 'bit64' package.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_language.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for type 'language' — opts_language","title":"Constructive options for type 'language' — opts_language","text":"options used objects type 'language'. default function useless nothing can set, provided case users want extend method constructors.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_language.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for type 'language' — opts_language","text":"","code":"opts_language(constructor = c(\"default\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_language.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for type 'language' — opts_language","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_language.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for type 'language' — opts_language","text":"object class <constructive_options/constructive_options_language>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_language.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for type 'language' — opts_language","text":"Depending constructor, construct object follows: \"default\" : use constructive's deparsing algorithm attributeless calls, use .call() language elements attributes need constructed.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for type 'list' — opts_list","title":"Constructive options for type 'list' — opts_list","text":"options used objects type 'list'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for type 'list' — opts_list","text":"","code":"opts_list(   constructor = c(\"list\", \"list2\"),   ...,   trim = NULL,   fill = c(\"vector\", \"new_list\", \"+\", \"...\", \"none\") )"},{"path":"https://cynkra.github.io/constructive/reference/opts_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for type 'list' — opts_list","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object trim NULL integerish. Maximum elements showed trimmed. Note necessarily produce code reproduce input. code parse without failure evaluation might fail. fill String. Method use represent trimmed elements.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for type 'list' — opts_list","text":"object class <constructive_options/constructive_options_list>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for type 'list' — opts_list","text":"Depending constructor, construct object follows: \"list\" (default): Build object calling list(). \"list2\": Build object calling rlang::list2(), difference keep trailing comma list trimmed call spans several lines. trim provided, depending fill present trimmed elements followed: \"vector\" (default): Use vector(), instance list(\"\", \"b\", \"c\") might become c(list(\"\"), vector(\"list\", 2)). \"new_list\": Use rlang::new_list(), instance list(\"\", \"b\", \"c\") might become c(list(\"\"), rlang::new_list(2)). \"+\": Use unary +, instance list(\"\", \"b\", \"c\") might become list(\"\", +2). \"...\": Use ..., instance list(\"\", \"b\", \"c\") might become list(\"\", ...) \"none\": represent trimmed elements. trim used output parsable might possible evaluate, especially fill = \"...\". case might want set check = FALSE","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_logical.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for type 'logical' — opts_logical","title":"Constructive options for type 'logical' — opts_logical","text":"options used objects type 'logical'. type single native constructor, additional options can set. set options atomic types see opts_atomic().","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_logical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for type 'logical' — opts_logical","text":"","code":"opts_logical(   constructor = c(\"default\"),   ...,   trim = NULL,   fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"),   compress = TRUE )"},{"path":"https://cynkra.github.io/constructive/reference/opts_logical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for type 'logical' — opts_logical","text":"constructor String. Method used construct object, often name function. ... Additional options used user defined constructors opts object trim NULL integerish. Maximum elements showed trimmed. Note necessarily produce code reproduce input. code parse without failure evaluation might fail. fill String. Method use represent trimmed elements. See ?opts_atomic compress Boolean. TRUE instead c() Use seq(), rep() relevant simplify output.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_logical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for type 'logical' — opts_logical","text":"object class <constructive_options/constructive_options_logical>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for matrices — opts_matrix","title":"Constructive options for matrices — opts_matrix","text":"Matrices atomic vectors, lists, objects type \"expression\" \"dim\" attributes length 2.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for matrices — opts_matrix","text":"","code":"opts_matrix(constructor = c(\"matrix\", \"array\", \"cbind\", \"rbind\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for matrices — opts_matrix","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for matrices — opts_matrix","text":"object class <constructive_options/constructive_options_matrix>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for matrices — opts_matrix","text":"Depending constructor, construct object follows: \"matrix\" : use matrix() \"array\" : use array() \"cbind\",\"rbind\" : use cbind() \"rbind()\", makes named columns rows easier read. \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. usually equivalent \"array\" \"atomic\" : define atomic vector repair attributes","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_mts.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for time-series objets — opts_mts","title":"Constructive options for time-series objets — opts_mts","text":"Depending constructor, construct object follows: \"ts\" : use ts() \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. usually equivalent \"atomic\" \"atomic\" : define atomic vector repair attributes","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_mts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for time-series objets — opts_mts","text":"","code":"opts_mts(constructor = c(\"ts\", \"next\", \"atomic\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_mts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for time-series objets — opts_mts","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_mts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for time-series objets — opts_mts","text":"object class <constructive_options/constructive_options_mts>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_numeric_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for numeric_version — opts_numeric_version","title":"Constructive options for numeric_version — opts_numeric_version","text":"Depending constructor, construct object follows: \"numeric_version\" : use numeric_version() \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. usually equivalent \"list\" \"list\" : define list repair attributes","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_numeric_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for numeric_version — opts_numeric_version","text":"","code":"opts_numeric_version(constructor = c(\"numeric_version\", \"next\", \"list\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_numeric_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for numeric_version — opts_numeric_version","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_numeric_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for numeric_version — opts_numeric_version","text":"object class <constructive_options/constructive_options_numeric_version>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_octmode.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'octmode' — opts_octmode","title":"Constructive options for class 'octmode' — opts_octmode","text":"options used objects class 'octmode'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_octmode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'octmode' — opts_octmode","text":"","code":"opts_octmode(constructor = c(\"as.octmode\", \"next\"), ..., integer = FALSE)"},{"path":"https://cynkra.github.io/constructive/reference/opts_octmode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'octmode' — opts_octmode","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object integer Whether use .octmode() integer rather character","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_octmode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'octmode' — opts_octmode","text":"object class <constructive_options/constructive_options_octmode>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_octmode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'octmode' — opts_octmode","text":"Depending constructor, construct object follows: \".octmode\" (default): build object using .octmode() \"next\" : Use constructor next supported class.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_ordered.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'ordered' — opts_ordered","title":"Constructive options for class 'ordered' — opts_ordered","text":"options used objects class 'ordered'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_ordered.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'ordered' — opts_ordered","text":"","code":"opts_ordered(   constructor = c(\"ordered\", \"factor\", \"new_ordered\", \"next\", \"integer\"),   ... )"},{"path":"https://cynkra.github.io/constructive/reference/opts_ordered.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'ordered' — opts_ordered","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_ordered.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'ordered' — opts_ordered","text":"object class <constructive_options/constructive_options_ordered>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_ordered.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'ordered' — opts_ordered","text":"Depending constructor, construct object follows: \"ordered\" (default): Build object using ordered(), levels defined explicitly alphabetical order (locale dependent!) \"factor\" : build object using factor() ordered = TRUE. \"new_ordered\" : Build object using vctrs::new_ordered(). Levels always defined explicitly. \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"integer\" : define integer vector repair attributes","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_package_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for package_version — opts_package_version","title":"Constructive options for package_version — opts_package_version","text":"Depending constructor, construct object follows: \"package_version\" : use package_version() \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. usually equivalent \"array\" \"list\" : define list repair attributes","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_package_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for package_version — opts_package_version","text":"","code":"opts_package_version(constructor = c(\"package_version\", \"next\", \"list\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_package_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for package_version — opts_package_version","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_package_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for package_version — opts_package_version","text":"object class <constructive_options/constructive_options_package_version>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_pairlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for pairlists — opts_pairlist","title":"Constructive options for pairlists — opts_pairlist","text":"Depending constructor, construct object follows: \"pairlist\" (default): Build object using pairlist() call. \"pairlist2\" : Build object using rlang::pairlist2() call.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_pairlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for pairlists — opts_pairlist","text":"","code":"opts_pairlist(constructor = c(\"pairlist\", \"pairlist2\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_pairlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for pairlists — opts_pairlist","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_pairlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for pairlists — opts_pairlist","text":"object class <constructive_options/constructive_options_pairlist>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_quosure.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'quosure' — opts_quosure","title":"Constructive options for class 'quosure' — opts_quosure","text":"options used objects class 'quosure'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_quosure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'quosure' — opts_quosure","text":"","code":"opts_quosure(constructor = c(\"new_quosure\", \"next\", \"language\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_quosure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'quosure' — opts_quosure","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_quosure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'quosure' — opts_quosure","text":"object class <constructive_options/constructive_options_quosure>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_quosure.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'quosure' — opts_quosure","text":"Depending constructor, construct object follows: \"new_quosure\" (default): Build object using new_quosure() call character vector. \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"language\" : define language object repair attributes.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_quosures.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'quosures' — opts_quosures","title":"Constructive options for class 'quosures' — opts_quosures","text":"options used objects class 'quosures'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_quosures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'quosures' — opts_quosures","text":"","code":"opts_quosures(constructor = c(\"new_quosures\", \"next\", \"list\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_quosures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'quosures' — opts_quosures","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_quosures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'quosures' — opts_quosures","text":"object class <constructive_options/constructive_options_quosures>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_quosures.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'quosures' — opts_quosures","text":"Depending constructor, construct object follows: \"as_quosures\" (default): Build object using as_quosures() call character vector. \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"list\" : define list object repair attributes.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for type 'raw' — opts_raw","title":"Constructive options for type 'raw' — opts_raw","text":"options used objects type 'raw'. Depending constructor, construct object follows: \".raw\" (default): Use .raw(), raw() relevant \"charToRaw\" : Use charToRaw() string, raw vector contains zero fall back \".raw\" constructor. set options atomic types see opts_atomic().","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for type 'raw' — opts_raw","text":"","code":"opts_raw(   constructor = c(\"as.raw\", \"charToRaw\"),   ...,   trim = NULL,   fill = c(\"default\", \"rlang\", \"+\", \"...\", \"none\"),   compress = TRUE,   representation = c(\"hexadecimal\", \"decimal\") )"},{"path":"https://cynkra.github.io/constructive/reference/opts_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for type 'raw' — opts_raw","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object trim NULL integerish. Maximum elements showed trimmed. Note necessarily produce code reproduce input. code parse without failure evaluation might fail. fill String. Method use represent trimmed elements. See ?opts_atomic compress Boolean. TRUE instead c() Use seq(), rep() relevant simplify output. representation \".raw\" constructor. Respectively generate output formats .raw(0x10) .raw(16)","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for type 'raw' — opts_raw","text":"object class <constructive_options/constructive_options_raw>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_rowwise_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'rowwise_df' — opts_rowwise_df","title":"Constructive options for class 'rowwise_df' — opts_rowwise_df","text":"options used objects class 'rowwise_df'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_rowwise_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'rowwise_df' — opts_rowwise_df","text":"","code":"opts_rowwise_df(constructor = c(\"default\", \"next\", \"list\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_rowwise_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'rowwise_df' — opts_rowwise_df","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_rowwise_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'rowwise_df' — opts_rowwise_df","text":"object class <constructive_options/constructive_options_rowwise_df>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_rowwise_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'rowwise_df' — opts_rowwise_df","text":"Depending constructor, construct object follows: \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"list\" : define list object repair attributes.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_tbl_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for tibbles — opts_tbl_df","title":"Constructive options for tibbles — opts_tbl_df","text":"options used objects class 'tbl_df', also known tibbles.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_tbl_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for tibbles — opts_tbl_df","text":"","code":"opts_tbl_df(   constructor = c(\"tibble\", \"tribble\", \"next\", \"list\"),   ...,   trailing_comma = TRUE,   justify = c(\"left\", \"right\", \"centre\", \"none\"),   recycle = TRUE )"},{"path":"https://cynkra.github.io/constructive/reference/opts_tbl_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for tibbles — opts_tbl_df","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object trailing_comma Boolean. Whether leave trailing comma end constructor call calls justify String. Justification columns constructor \"tribble\" recycle Boolean. \"tibble\" constructor. Whether recycle scalars compress output.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_tbl_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for tibbles — opts_tbl_df","text":"object class <constructive_options/constructive_options_tbl_df>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_tbl_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for tibbles — opts_tbl_df","text":"Depending constructor, construct object follows: \"tibble\" (default): Wrap column definitions tibble::tibble() call. \"tribble\" : build object using tibble::tribble() possible, fall back tibble::tibble(). \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. \"list\" : Use list() treat class regular attribute.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for time-series objets — opts_ts","title":"Constructive options for time-series objets — opts_ts","text":"Depending constructor, construct object follows: \"ts\" : use ts() \"next\" : Use constructor next supported class. Call .class2() object see order methods tried. usually equivalent \"atomic\" \"atomic\" : define atomic vector repair attributes","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for time-series objets — opts_ts","text":"","code":"opts_ts(constructor = c(\"ts\", \"next\", \"atomic\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for time-series objets — opts_ts","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for time-series objets — opts_ts","text":"object class <constructive_options/constructive_options_ts>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_vctrs_list_of.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'data.table' — opts_vctrs_list_of","title":"Constructive options for class 'data.table' — opts_vctrs_list_of","text":"options used objects class 'data.table'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_vctrs_list_of.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'data.table' — opts_vctrs_list_of","text":"","code":"opts_vctrs_list_of(constructor = c(\"list_of\", \"next\", \"list\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_vctrs_list_of.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'data.table' — opts_vctrs_list_of","text":"constructor String. Name function used construct object, see Details section. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_vctrs_list_of.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'data.table' — opts_vctrs_list_of","text":"object class <constructive_options/constructive_options_vctrs_list_of>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_vctrs_list_of.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'data.table' — opts_vctrs_list_of","text":"Depending constructor, construct object follows: \"list_of\" (default): Wrap column definitions list_of() call. \"list\" : Use list() treat class regular attribute.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_weakref.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for the class weakref — opts_weakref","title":"Constructive options for the class weakref — opts_weakref","text":"options used objects type weakref. weakref objects rarely encountered base R function create . However rlang new_weakref function can use.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_weakref.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for the class weakref — opts_weakref","text":"","code":"opts_weakref(constructor = c(\"new_weakref\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_weakref.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for the class weakref — opts_weakref","text":"constructor String. Name constructor. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_weakref.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for the class weakref — opts_weakref","text":"object class <constructive_options/constructive_options_array>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_xts.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'xts' — opts_xts","title":"Constructive options for class 'xts' — opts_xts","text":"options used objects class 'xts'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_xts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'xts' — opts_xts","text":"","code":"opts_xts(constructor = c(\"as.xts.matrix\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_xts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'xts' — opts_xts","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_xts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'xts' — opts_xts","text":"object class <constructive_options/constructive_options_xts>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_xts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'xts' — opts_xts","text":"Depending constructor, construct object follows: \".xts.matrix\" (default): build object using xts::.xts.matrix(). \".xts.data.frame\": build object using xts::.xts.data.frame(), probably readable option made default constructor requires 'xts' package installed . \"xts\": build object using xts::xts(). \".xts\": build object using xts::.xts(). \"next\": Use constructor next supported class.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_yearmon.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'yearmon' — opts_yearmon","title":"Constructive options for class 'yearmon' — opts_yearmon","text":"options used objects class 'yearmon'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_yearmon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'yearmon' — opts_yearmon","text":"","code":"opts_yearmon(constructor = c(\"as.yearmon\", \"yearmon\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_yearmon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'yearmon' — opts_yearmon","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_yearmon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'yearmon' — opts_yearmon","text":"object class <constructive_options/constructive_options_yearmon>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_yearmon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'yearmon' — opts_yearmon","text":"Depending constructor, construct object follows: \".yearmon\" (default): build object using zoo::.yearmon() string format \"2000 Q3\". \"yearmon\" : build object using zoo::yearmon() double format 2000.5 \"next\" : Use constructor next supported class.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_yearqtr.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'yearqtr' — opts_yearqtr","title":"Constructive options for class 'yearqtr' — opts_yearqtr","text":"options used objects class 'yearqtr'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_yearqtr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'yearqtr' — opts_yearqtr","text":"","code":"opts_yearqtr(constructor = c(\"as.yearqtr\", \"yearqtr\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_yearqtr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'yearqtr' — opts_yearqtr","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_yearqtr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'yearqtr' — opts_yearqtr","text":"object class <constructive_options/constructive_options_yearqtr>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_yearqtr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'yearqtr' — opts_yearqtr","text":"Depending constructor, construct object follows: \".yearqtr\" (default): build object using zoo::.yearqtr() string format \"2000 Q3\". \"yearqtr\" : build object using zoo::yearqtr() double format 2000.5 \"next\" : Use constructor next supported class.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_zoo.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'zoo' — opts_zoo","title":"Constructive options for class 'zoo' — opts_zoo","text":"options used objects class 'zoo'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_zoo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'zoo' — opts_zoo","text":"","code":"opts_zoo(constructor = c(\"zoo\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_zoo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'zoo' — opts_zoo","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_zoo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'zoo' — opts_zoo","text":"object class <constructive_options/constructive_options_zoo>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_zoo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'zoo' — opts_zoo","text":"Depending constructor, construct object follows: \"zoo\" (default): build object using zoo::zoo(). \"next\" : Use constructor next supported class.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_zooreg.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructive options for class 'zooreg' — opts_zooreg","title":"Constructive options for class 'zooreg' — opts_zooreg","text":"options used objects class 'zooreg'.","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_zooreg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructive options for class 'zooreg' — opts_zooreg","text":"","code":"opts_zooreg(constructor = c(\"zooreg\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/opts_zooreg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructive options for class 'zooreg' — opts_zooreg","text":"constructor String. Name function used construct object. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_zooreg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructive options for class 'zooreg' — opts_zooreg","text":"object class <constructive_options/constructive_options_zooreg>","code":""},{"path":"https://cynkra.github.io/constructive/reference/opts_zooreg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructive options for class 'zooreg' — opts_zooreg","text":"Depending constructor, construct object follows: \"zooreg\" (default): build object using zoo::zooreg(), using start frequency arguments. \"next\" : Use constructor next supported class.","code":""},{"path":"https://cynkra.github.io/constructive/reference/other-opts.html","id":null,"dir":"Reference","previous_headings":"","what":"Other Opts Functions — other-opts","title":"Other Opts Functions — other-opts","text":"opts_*() functions extensively documented yet. Hopefully signature self explanatory, please raise issue","code":""},{"path":"https://cynkra.github.io/constructive/reference/other-opts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Other Opts Functions — other-opts","text":"","code":"opts_NULL(constructor = \"NULL\", ...)  opts_bibentry(constructor = c(\"bibentry\", \"next\"), ...)  opts_citationFooter(constructor = c(\"citFooter\", \"next\"), ...)  opts_citationHeader(constructor = c(\"citHeader\", \"next\"), ...)  opts_difftime(constructor = c(\"as.difftime\", \"next\"), ...)  opts_error(constructor = c(\"errorCondition\", \"next\"), ...)  opts_expression(constructor = c(\"default\"), ...)  opts_CoordCartesian(   constructor = c(\"coord_cartesian\", \"next\", \"environment\"),   ... )  opts_CoordFixed(constructor = c(\"coord_fixed\", \"next\", \"environment\"), ...)  opts_CoordFlip(constructor = c(\"coord_flip\", \"next\", \"environment\"), ...)  opts_CoordMap(constructor = c(\"coord_map\", \"next\", \"environment\"), ...)  opts_CoordMunch(constructor = c(\"coord_munch\", \"next\", \"environment\"), ...)  opts_CoordPolar(constructor = c(\"coord_polar\", \"next\", \"environment\"), ...)  opts_CoordQuickmap(   constructor = c(\"coord_quickmap\", \"next\", \"environment\"),   ... )  opts_CoordSf(constructor = c(\"coord_sf\", \"next\", \"environment\"), ...)  opts_CoordTrans(constructor = c(\"coord_trans\", \"next\", \"environment\"), ...)  opts_FacetWrap(   constructor = c(\"facet_wrap\", \"ggproto\", \"next\", \"environment\"),   ... )  opts_Scale(constructor = c(\"default\", \"next\", \"environment\"), ...)  opts_ScalesList(constructor = c(\"ScalesList\", \"next\", \"list\"), ...)  opts_element_blank(constructor = c(\"element_blank\", \"next\", \"list\"), ...)  opts_element_grob(constructor = c(\"element_grob\", \"next\", \"list\"), ...)  opts_element_line(constructor = c(\"element_line\", \"next\", \"list\"), ...)  opts_element_rect(constructor = c(\"element_rect\", \"next\", \"list\"), ...)  opts_element_render(constructor = c(\"element_render\", \"next\", \"list\"), ...)  opts_element_text(constructor = c(\"element_text\", \"next\", \"list\"), ...)  opts_ggproto(constructor = c(\"default\", \"next\", \"environment\"), ...)  opts_labels(constructor = c(\"labs\", \"next\", \"list\"), ...)  opts_margin(constructor = c(\"margin\", \"next\", \"double\"), ...)  opts_rel(constructor = c(\"rel\", \"next\", \"double\"), ...)  opts_theme(constructor = c(\"theme\", \"next\", \"list\"), ...)  opts_uneval(constructor = c(\"aes\", \"next\", \"list\"), ...)  opts_waiver(constructor = c(\"waiver\", \"next\", \"list\"), ...)  opts_noquote(constructor = c(\"noquote\", \"next\"), ...)  opts_person(constructor = c(\"person\", \"next\"), ...)  opts_simpleCondition(constructor = c(\"simpleCondition\", \"next\"), ...)  opts_simpleError(constructor = c(\"simpleError\", \"next\"), ...)  opts_simpleMessage(constructor = c(\"simpleMessage\", \"next\"), ...)  opts_simpleUnit(constructor = c(\"unit\", \"next\", \"double\"), ...)  opts_simpleWarning(constructor = c(\"simpleWarning\", \"next\"), ...)  opts_warning(constructor = c(\"warningCondition\", \"next\"), ...)"},{"path":"https://cynkra.github.io/constructive/reference/other-opts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Other Opts Functions — other-opts","text":"constructor String. Method used construct object, often name function. ... Additional options used user defined constructors opts object","code":""},{"path":"https://cynkra.github.io/constructive/reference/templates.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend constructive — templates","title":"Extend constructive — templates","text":".cstr_new_class() .cstr_new_constructor() open new unsaved scripts, optionally commented, can used templates define new constructors. class already supported want implement new constructor, use .cstr_new_constructor(), otherwise use .cstr_new_class().","code":""},{"path":"https://cynkra.github.io/constructive/reference/templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend constructive — templates","text":"","code":".cstr_new_class(   class = c(\"CLASS\", \"PARENT_CLASS\"),   constructor = \"PKG::CONSTRUCTOR\",   commented = FALSE )  .cstr_new_constructor(   class = c(\"CLASS\", \"PARENT_CLASS\"),   constructor = \"PKG::CONSTRUCTOR\",   commented = FALSE )"},{"path":"https://cynkra.github.io/constructive/reference/templates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend constructive — templates","text":"class Class support, provide full class() vector. constructor Name constructor, usually name function can use build object. might need adjust script. commented Boolean. Whether include comments template.","code":""},{"path":"https://cynkra.github.io/constructive/reference/templates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend constructive — templates","text":"function return NULL invisibly called side effects","code":""},{"path":"https://cynkra.github.io/constructive/reference/templates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extend constructive — templates","text":"suggest following workflow (summarized message call functions): Call usethis::use_package(\\\"constructive\\\", \\\"Suggests\\\")` one time point, add soft dependency 'constructive' needed install use . Call .cstr_new_class() .cstr_new_constructor(), commented = TRUE guidance. Save scripts unchanged \"R\" folder package. devtools::document(): register S3 methods. Try construct() new object, print call chosen constructor. Tweak code, particular definition args. README example extension package 'constructive.example' guides process. See also {constructive}'s code vignette(\"extend-constructive\") details.","code":""},{"path":[]},{"path":"https://cynkra.github.io/constructive/news/index.html","id":"constructive-110","dir":"Changelog","previous_headings":"","what":"constructive 1.1.0","title":"constructive 1.1.0","text":"CRAN release: 2025-01-10 Features: Implemented construction R6 objects Implemented construction zoo xts objects Implemented \"cbind\" \"rbind\" constructors matrices Now ’s need namespace opts_*() functions package attached, mean can call instance constructive::construct(x, opts_tbl_df(\"tribble\")) rather constructive::construct(x, constructive::opts_tbl_df(\"tribble\")) New classes constructors can now implemented package without importing package (adding “Suggests” instead) Added hex logo Fixes improvements: Fixed display issue construct_diff() construct_clip() now shows console message addition writing clipboard Improved support data frames, tibbles, data.tables regarding non syntactic, empty, NA duplicate names Improved recycling data frames Implemented support dates tribble() calls calling construct(x, opts_tbl_df(\"tribble\")) Improved support classed matrices Fixed timestamp precision issue Improved support \"POSIXlt\" class Improved encoding support Fixed construction vectors numeric_version(), package_version(), R_system_version() Fixed construction edge case calls like (`fun<-`)() (`b`)() Fixed construction environments NULL parents","code":""},{"path":"https://cynkra.github.io/constructive/news/index.html","id":"constructive-101","dir":"Changelog","previous_headings":"","what":"constructive 1.0.1","title":"constructive 1.0.1","text":"CRAN release: 2024-07-07 fixed typo breaking .cstr_new_class(, commented = TRUE) fixed bug regarding high precedence infix operators breaking deparse_call() “simpleUnit” considered “grid” package class, “base” class fixed check corrupted “simpleUnit” objects construction “ScalesList” objects improved, failed cases construction “CoordCartesian” improved considers “default” argument Improved vignette consistency","code":""},{"path":"https://cynkra.github.io/constructive/news/index.html","id":"constructive-100","dir":"Changelog","previous_headings":"","what":"constructive 1.0.0","title":"constructive 1.0.0","text":"CRAN release: 2024-07-02","code":""},{"path":"https://cynkra.github.io/constructive/news/index.html","id":"internals-extension-system-cosmetics-1-0-0","dir":"Changelog","previous_headings":"","what":"Internals, extension system, cosmetics","title":"constructive 1.0.0","text":"internals changed quite bit, new extension system developed. vignette “extend-constructive” details constructive works. package {constructive.example} updated reflect new system. remove non API calls C code, comply new CRAN rules. pkgdown website categorizes functions package can explored conveniently (Thanks Maelle Salmon @maelle suggestion). doc improved overall README reworked","code":""},{"path":"https://cynkra.github.io/constructive/news/index.html","id":"new-functions-1-0-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"constructive 1.0.0","text":"Two new functions construct_dput() construct_base() allow construct objects respectively without using high level constructors , using included base packages (data.frame() etc). new function construct_clip() just like construct() copies code directly clipboard (Thanks Josiah Parry @JosiahParry suggestion). now opts_logical(), opts_integer(), opts_double(), opts_complex(), opts_character() opts_raw() options can set independently. opts_atomic() still works set . behavior atomics new functions precedence. “raw” type supported better can constructed integers decimal hexadecimal notation “.raw” constructor, character using “charToRaw” constructor. new functions .cstr_new_class() .cstr_new_template() facilitate process working new extension system.","code":""},{"path":"https://cynkra.github.io/constructive/news/index.html","id":"new-classes-1-0-0","dir":"Changelog","previous_headings":"","what":"New classes","title":"constructive 1.0.0","text":"Expression vectors now supported (reason missed !). citationFooter citationHeader hexmode octmode person difftime simpleError simpleWarning simpleMessage simpleCondition errorCondition warningCondition support class “integer64” {bit64} package. important can’t recreate NA negative integer64 objects using base R . support class “blob” {blob} package.","code":""},{"path":"https://cynkra.github.io/constructive/news/index.html","id":"new-features-and-deprecation-1-0-0","dir":"Changelog","previous_headings":"","what":"New features and deprecation","title":"constructive 1.0.0","text":"Many constructive functions gain classes argument generalize construct_dput() construct_base(), users can enable disable idiomatic construction classes. construct_reprex() construct_multi() gain include_dotted = TRUE argument can optionally disable construction objects .Random.seed int global environment .Class execution environment S3 methods.s construct() construct_multi() gain arguments unicode_representation escape previously used opts_atomic() now applied strings also element names variable names. look encoding constructing character vectors, UTF-8 “é” constructed like latin-1 “é” anymore. Hopefully help users encoding hell faster. opts_tbl_df() gains justify argument control justification columns constructor =“tribble”` (Thanks Jacob Scott @wurli implementation). imports lazydata environments packages constructed parent.env(asNamespace(\"pkg\")) getNamespaceInfo(\"pkg\", \"lazydata\"). constructed regular environments. constructing environments now lock environments bindings relevant. construct negative zeroes -0. identical(0, -0)) TRUE 1/-0 -Inf made sense support . opts_environment() gains \"predefine\" constructor opts_environment(predefine = TRUE) deprecated. old way still works warns documented anymore. opts_atomic() arguments unicode_representation escape deprecated, use new opts_character() function set main function directly instead also affect symbols argument names. old way still works warns documented anymore.","code":""},{"path":"https://cynkra.github.io/constructive/news/index.html","id":"fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"constructive 1.0.0","text":"solve operator precedence issues deparse_call() Named vectors length 1 constructed properly Objects constructed properly names attributes, contain NAs, named like c()’s arguments recursive use.names Circularity detected attempting construct environment refering inappropriate constructor. now fails explicitly rather trigger infinite loop low level error. NAs NaNs conflated anymore compressing double vectors complex numbers constructed properly regarding different combination NA values real imaginary parts. check S4 bit using isS4() use asS4() necessary opts_numeric_version(), opts_package_version() opts_R_system_version() incorrectly named “atomic” constructor replaced “list” constructor data frames, data tables tibbles now properly constructed contain columns idiomatic constructors handle, “row.names”, “stringsAsFactors” data frames. POSIXlt constructed according R version, account changes R 4.3.0 can construct objects “.Data” attribute, used fail structure() .Data argument. default “row.names” attribute built c(NA, -<nrow>) form, dput(), solves rare corner cases. fix issues raw strings constructing character vectors fix issues NA, NaN, Inf dates NULL timezones fix environment attribute repair Functions non syntactic formals constructed properly","code":""},{"path":"https://cynkra.github.io/constructive/news/index.html","id":"constructive-030","dir":"Changelog","previous_headings":"","what":"constructive 0.3.0","title":"constructive 0.3.0","text":"CRAN release: 2024-03-05 new debugging tool, construct_reprex() function, introduced. can called function construct variables arguments ’s called. construct_multi() now constructs promises, practice useful can construct evaluation environment function, including uneavaluated potentially NSE args function Set options(constructive_print_mode = <character>) <character> vector strings among \"console\", script, \"clipboard\" \"reprex\". default behavior “console”. See `?constructive-global_options` opts_atomic(escape = FALSE) (default) now correctly uses surrounding single quotes strings contain double quotes single quotes. deparse_call() robust gains arguments escape unicode_representation already present opts_atomic() ggplot object generation supports internal changes ggplot2 3.5.0, resulting construction nicer. Data frames can reconstructed columns don’t data.frame() method “read.table” constructor data frames supports one_liner argument roxygen2 Suggested (Imported anymore), ellipsis dependency removed formulas “next” constructor, useful see formulas low level classes S3 methods length, [, [[ etc handled better .env() doesn’t crash anymore provided wrong obsolete memory address Integer vectors constructed properly feature consecutive elements differing .Machine$integer.max Classed objects types “…” “externalptr” constructed properly S4 construction uses slot argument rather representation arg","code":""},{"path":"https://cynkra.github.io/constructive/news/index.html","id":"constructive-020","dir":"Changelog","previous_headings":"","what":"constructive 0.2.0","title":"constructive 0.2.0","text":"CRAN release: 2023-11-13 don’t use {styler} anymore, performance sensibly enhanced consequence. package works without {prettycode} installed, uses ’s installed default using magrittr pipe %>% R versions don’t support |> NA levels supported classes “factor” “ordered” Environment construction includes variables prefixed dot don’t attach package, don’t need use constructive:: ... opts_* functions, instance can call constructive::construct(cars, opts_data.frame(\"read.table\")). quote({}) now constructed \"{ }\" rather \"`{`()\"","code":""},{"path":"https://cynkra.github.io/constructive/news/index.html","id":"constructive-010","dir":"Changelog","previous_headings":"","what":"constructive 0.1.0","title":"constructive 0.1.0","text":"CRAN release: 2023-06-06 First CRAN release construct() generates code build object using idiomatic code, wraps lower level .cstr_construct() S3 generic. currently support 66 classes/types: “array”, “AsIs”, “atomic”, “classGeneratorFunction”, “classPrototypeDef”, “classRepresentation”, “constructive_options”, “CoordCartesian”, “CoordFixed”, “CoordFlip”, “CoordMap”, “CoordMunch”, “CoordPolar”, “CoordQuickmap”, “CoordSf”, “CoordTrans”, “data.frame”, “data.table”, “Date”, “default”, “dm”, “dots”, “element_blank”, “element_grob”, “element_line”, “element_rect”, “element_render”, “element_text”, “environment”, “externalptr”, “FacetWrap”, “factor”, “formula”, “function”, “ggplot”, “ggproto”, “grouped_df”, “labels”, “language”, “Layer”, “list”, “margin”, “matrix”, “mts”, “numeric_version”, “ordered”, “package_version”, “pairlist”, “POSIXct”, “POSIXlt”, “quosure”, “quosures”, “R_system_version”, “rel”, “rowwise_df”, “S4”, “Scale”, “ScalesList”, “simpleUnit”, “tbl_df”, “theme”, “ts”, “uneval”, “vctrs_list_of”, “waiver” “weakref”. set functions prefixed opts_ can used choose various constructors apply parameters tweak output. special constructor named “next” can used fall back next .cstr_construct() method. useful explore objects level one step lower idiomatic constructor. corrupted object encountered next method used. Users can extend package using set exported functions prefixed .cstr_, vignette describes proceed. construct_issues() used without arguments check issues encountered last reconstructed object, can also provided specific constructive object. construct_diff() highlights differences code used produce 2 objects. construct_multi() constructs several objects named list, construct_dump() similar base::dump(), ’s wrapper around construct_multi() writes file. construct_signature() constructs function signature one see “usage” section function’s help file. outputs code produced deparse_call() alternative base::deparse() rlang::expr_deparse() handles additional corner cases fails encountering tokens symbols syntactic literals .","code":""},{"path":"https://cynkra.github.io/constructive/news/index.html","id":"constructive-001","dir":"Changelog","previous_headings":"","what":"constructive 0.0.1","title":"constructive 0.0.1","text":"{constructive} produces code can used recreate R objects. sense similar base::dput() base::deparse() {constructive} strives use “natural” constructors (factor factors, .Date() dates, data.frame() data frames etc), order get output readable humans.","code":""}]
